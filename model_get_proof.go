/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetProof type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetProof{}

// GetProof struct for GetProof
type GetProof struct {
	Market               string `json:"market"`
	Epoch                int32  `json:"epoch"`
	Token                string `json:"token"`
	AdditionalProperties map[string]interface{}
}

type _GetProof GetProof

// NewGetProof instantiates a new GetProof object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProof(market string, epoch int32, token string) *GetProof {
	this := GetProof{}
	this.Market = market
	this.Epoch = epoch
	this.Token = token
	return &this
}

// NewGetProofWithDefaults instantiates a new GetProof object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProofWithDefaults() *GetProof {
	this := GetProof{}
	return &this
}

// GetMarket returns the Market field value
func (o *GetProof) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *GetProof) GetMarketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *GetProof) SetMarket(v string) {
	o.Market = v
}

// GetEpoch returns the Epoch field value
func (o *GetProof) GetEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value
// and a boolean to check if the value has been set.
func (o *GetProof) GetEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epoch, true
}

// SetEpoch sets field value
func (o *GetProof) SetEpoch(v int32) {
	o.Epoch = v
}

// GetToken returns the Token field value
func (o *GetProof) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *GetProof) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *GetProof) SetToken(v string) {
	o.Token = v
}

func (o GetProof) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetProof) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["market"] = o.Market
	toSerialize["epoch"] = o.Epoch
	toSerialize["token"] = o.Token

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetProof) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"market",
		"epoch",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetProof := _GetProof{}

	err = json.Unmarshal(data, &varGetProof)

	if err != nil {
		return err
	}

	*o = GetProof(varGetProof)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "market")
		delete(additionalProperties, "epoch")
		delete(additionalProperties, "token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetProof struct {
	value *GetProof
	isSet bool
}

func (v NullableGetProof) Get() *GetProof {
	return v.value
}

func (v *NullableGetProof) Set(val *GetProof) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProof) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProof) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProof(val *GetProof) *NullableGetProof {
	return &NullableGetProof{value: val, isSet: true}
}

func (v NullableGetProof) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProof) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
