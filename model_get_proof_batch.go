/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetProofBatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetProofBatch{}

// GetProofBatch struct for GetProofBatch
type GetProofBatch struct {
	Batch                []GetProof `json:"batch"`
	AdditionalProperties map[string]interface{}
}

type _GetProofBatch GetProofBatch

// NewGetProofBatch instantiates a new GetProofBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProofBatch(batch []GetProof) *GetProofBatch {
	this := GetProofBatch{}
	this.Batch = batch
	return &this
}

// NewGetProofBatchWithDefaults instantiates a new GetProofBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProofBatchWithDefaults() *GetProofBatch {
	this := GetProofBatch{}
	return &this
}

// GetBatch returns the Batch field value
func (o *GetProofBatch) GetBatch() []GetProof {
	if o == nil {
		var ret []GetProof
		return ret
	}

	return o.Batch
}

// GetBatchOk returns a tuple with the Batch field value
// and a boolean to check if the value has been set.
func (o *GetProofBatch) GetBatchOk() ([]GetProof, bool) {
	if o == nil {
		return nil, false
	}
	return o.Batch, true
}

// SetBatch sets field value
func (o *GetProofBatch) SetBatch(v []GetProof) {
	o.Batch = v
}

func (o GetProofBatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetProofBatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batch"] = o.Batch

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetProofBatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetProofBatch := _GetProofBatch{}

	err = json.Unmarshal(data, &varGetProofBatch)

	if err != nil {
		return err
	}

	*o = GetProofBatch(varGetProofBatch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "batch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetProofBatch struct {
	value *GetProofBatch
	isSet bool
}

func (v NullableGetProofBatch) Get() *GetProofBatch {
	return v.value
}

func (v *NullableGetProofBatch) Set(val *GetProofBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProofBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProofBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProofBatch(val *GetProofBatch) *NullableGetProofBatch {
	return &NullableGetProofBatch{value: val, isSet: true}
}

func (v NullableGetProofBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProofBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
