/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the TokenWrapper type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenWrapper{}

// TokenWrapper struct for TokenWrapper
type TokenWrapper struct {
	Address              string  `json:"address"`
	Name                 string  `json:"name"`
	Symbol               string  `json:"symbol"`
	Decimals             int32   `json:"decimals"`
	PriceUsd             float32 `json:"priceUsd"`
	PriceNative          string  `json:"priceNative"`
	AdditionalProperties map[string]interface{}
}

type _TokenWrapper TokenWrapper

// NewTokenWrapper instantiates a new TokenWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenWrapper(address string, name string, symbol string, decimals int32, priceUsd float32, priceNative string) *TokenWrapper {
	this := TokenWrapper{}
	this.Address = address
	this.Name = name
	this.Symbol = symbol
	this.Decimals = decimals
	this.PriceUsd = priceUsd
	this.PriceNative = priceNative
	return &this
}

// NewTokenWrapperWithDefaults instantiates a new TokenWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWrapperWithDefaults() *TokenWrapper {
	this := TokenWrapper{}
	return &this
}

// GetAddress returns the Address field value
func (o *TokenWrapper) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TokenWrapper) SetAddress(v string) {
	o.Address = v
}

// GetName returns the Name field value
func (o *TokenWrapper) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TokenWrapper) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *TokenWrapper) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TokenWrapper) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value
func (o *TokenWrapper) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TokenWrapper) SetDecimals(v int32) {
	o.Decimals = v
}

// GetPriceUsd returns the PriceUsd field value
func (o *TokenWrapper) GetPriceUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PriceUsd
}

// GetPriceUsdOk returns a tuple with the PriceUsd field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetPriceUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceUsd, true
}

// SetPriceUsd sets field value
func (o *TokenWrapper) SetPriceUsd(v float32) {
	o.PriceUsd = v
}

// GetPriceNative returns the PriceNative field value
func (o *TokenWrapper) GetPriceNative() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceNative
}

// GetPriceNativeOk returns a tuple with the PriceNative field value
// and a boolean to check if the value has been set.
func (o *TokenWrapper) GetPriceNativeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceNative, true
}

// SetPriceNative sets field value
func (o *TokenWrapper) SetPriceNative(v string) {
	o.PriceNative = v
}

func (o TokenWrapper) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenWrapper) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimals"] = o.Decimals
	toSerialize["priceUsd"] = o.PriceUsd
	toSerialize["priceNative"] = o.PriceNative

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TokenWrapper) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"name",
		"symbol",
		"decimals",
		"priceUsd",
		"priceNative",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenWrapper := _TokenWrapper{}

	err = json.Unmarshal(data, &varTokenWrapper)

	if err != nil {
		return err
	}

	*o = TokenWrapper(varTokenWrapper)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "name")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "decimals")
		delete(additionalProperties, "priceUsd")
		delete(additionalProperties, "priceNative")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTokenWrapper struct {
	value *TokenWrapper
	isSet bool
}

func (v NullableTokenWrapper) Get() *TokenWrapper {
	return v.value
}

func (v *NullableTokenWrapper) Set(val *TokenWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenWrapper(val *TokenWrapper) *NullableTokenWrapper {
	return &NullableTokenWrapper{value: val, isSet: true}
}

func (v NullableTokenWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
