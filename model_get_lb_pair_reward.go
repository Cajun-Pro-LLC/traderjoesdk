/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetLBPairReward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLBPairReward{}

// GetLBPairReward struct for GetLBPairReward
type GetLBPairReward struct {
	Amount               string `json:"amount"`
	TokenAddress         string `json:"tokenAddress"`
	AdditionalProperties map[string]interface{}
}

type _GetLBPairReward GetLBPairReward

// NewGetLBPairReward instantiates a new GetLBPairReward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLBPairReward(amount string, tokenAddress string) *GetLBPairReward {
	this := GetLBPairReward{}
	this.Amount = amount
	this.TokenAddress = tokenAddress
	return &this
}

// NewGetLBPairRewardWithDefaults instantiates a new GetLBPairReward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLBPairRewardWithDefaults() *GetLBPairReward {
	this := GetLBPairReward{}
	return &this
}

// GetAmount returns the Amount field value
func (o *GetLBPairReward) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *GetLBPairReward) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *GetLBPairReward) SetAmount(v string) {
	o.Amount = v
}

// GetTokenAddress returns the TokenAddress field value
func (o *GetLBPairReward) GetTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value
// and a boolean to check if the value has been set.
func (o *GetLBPairReward) GetTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenAddress, true
}

// SetTokenAddress sets field value
func (o *GetLBPairReward) SetTokenAddress(v string) {
	o.TokenAddress = v
}

func (o GetLBPairReward) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLBPairReward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["tokenAddress"] = o.TokenAddress

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetLBPairReward) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"tokenAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetLBPairReward := _GetLBPairReward{}

	err = json.Unmarshal(data, &varGetLBPairReward)

	if err != nil {
		return err
	}

	*o = GetLBPairReward(varGetLBPairReward)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "amount")
		delete(additionalProperties, "tokenAddress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetLBPairReward struct {
	value *GetLBPairReward
	isSet bool
}

func (v NullableGetLBPairReward) Get() *GetLBPairReward {
	return v.value
}

func (v *NullableGetLBPairReward) Set(val *GetLBPairReward) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLBPairReward) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLBPairReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLBPairReward(val *GetLBPairReward) *NullableGetLBPairReward {
	return &NullableGetLBPairReward{value: val, isSet: true}
}

func (v NullableGetLBPairReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLBPairReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
