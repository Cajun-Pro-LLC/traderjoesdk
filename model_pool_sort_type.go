/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PoolSortType - An enumeration.
type PoolSortType struct {
	PoolSortParam *PoolSortParam
	VolumeParam   *VolumeParam
}

// PoolSortParamAsPoolSortType is a convenience function that returns PoolSortParam wrapped in PoolSortType
func PoolSortParamAsPoolSortType(v *PoolSortParam) PoolSortType {
	return PoolSortType{
		PoolSortParam: v,
	}
}

// VolumeParamAsPoolSortType is a convenience function that returns VolumeParam wrapped in PoolSortType
func VolumeParamAsPoolSortType(v *VolumeParam) PoolSortType {
	return PoolSortType{
		VolumeParam: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PoolSortType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PoolSortParam
	err = newStrictDecoder(data).Decode(&dst.PoolSortParam)
	if err == nil {
		jsonPoolSortParam, _ := json.Marshal(dst.PoolSortParam)
		if string(jsonPoolSortParam) == "{}" { // empty struct
			dst.PoolSortParam = nil
		} else {
			if err = validator.Validate(dst.PoolSortParam); err != nil {
				dst.PoolSortParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.PoolSortParam = nil
	}

	// try to unmarshal data into VolumeParam
	err = newStrictDecoder(data).Decode(&dst.VolumeParam)
	if err == nil {
		jsonVolumeParam, _ := json.Marshal(dst.VolumeParam)
		if string(jsonVolumeParam) == "{}" { // empty struct
			dst.VolumeParam = nil
		} else {
			if err = validator.Validate(dst.VolumeParam); err != nil {
				dst.VolumeParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.VolumeParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PoolSortParam = nil
		dst.VolumeParam = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PoolSortType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PoolSortType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PoolSortType) MarshalJSON() ([]byte, error) {
	if src.PoolSortParam != nil {
		return json.Marshal(&src.PoolSortParam)
	}

	if src.VolumeParam != nil {
		return json.Marshal(&src.VolumeParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PoolSortType) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.PoolSortParam != nil {
		return obj.PoolSortParam
	}

	if obj.VolumeParam != nil {
		return obj.VolumeParam
	}

	// all schemas are nil
	return nil
}

type NullablePoolSortType struct {
	value *PoolSortType
	isSet bool
}

func (v NullablePoolSortType) Get() *PoolSortType {
	return v.value
}

func (v *NullablePoolSortType) Set(val *PoolSortType) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolSortType) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolSortType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolSortType(val *PoolSortType) *NullablePoolSortType {
	return &NullablePoolSortType{value: val, isSet: true}
}

func (v NullablePoolSortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolSortType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
