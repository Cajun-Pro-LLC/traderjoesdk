/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the GetVaultTVL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVaultTVL{}

// GetVaultTVL struct for GetVaultTVL
type GetVaultTVL struct {
	Date                 time.Time `json:"date"`
	Timestamp            int32     `json:"timestamp"`
	AmountX              int32     `json:"amountX"`
	AmountY              int32     `json:"amountY"`
	AmountXUsd           float32   `json:"amountXUsd"`
	AmountYUsd           float32   `json:"amountYUsd"`
	TvlUsd               float32   `json:"tvlUsd"`
	AdditionalProperties map[string]interface{}
}

type _GetVaultTVL GetVaultTVL

// NewGetVaultTVL instantiates a new GetVaultTVL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVaultTVL(date time.Time, timestamp int32, amountX int32, amountY int32, amountXUsd float32, amountYUsd float32, tvlUsd float32) *GetVaultTVL {
	this := GetVaultTVL{}
	this.Date = date
	this.Timestamp = timestamp
	this.AmountX = amountX
	this.AmountY = amountY
	this.AmountXUsd = amountXUsd
	this.AmountYUsd = amountYUsd
	this.TvlUsd = tvlUsd
	return &this
}

// NewGetVaultTVLWithDefaults instantiates a new GetVaultTVL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVaultTVLWithDefaults() *GetVaultTVL {
	this := GetVaultTVL{}
	return &this
}

// GetDate returns the Date field value
func (o *GetVaultTVL) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *GetVaultTVL) SetDate(v time.Time) {
	o.Date = v
}

// GetTimestamp returns the Timestamp field value
func (o *GetVaultTVL) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *GetVaultTVL) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetAmountX returns the AmountX field value
func (o *GetVaultTVL) GetAmountX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountX
}

// GetAmountXOk returns a tuple with the AmountX field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetAmountXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountX, true
}

// SetAmountX sets field value
func (o *GetVaultTVL) SetAmountX(v int32) {
	o.AmountX = v
}

// GetAmountY returns the AmountY field value
func (o *GetVaultTVL) GetAmountY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountY
}

// GetAmountYOk returns a tuple with the AmountY field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetAmountYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountY, true
}

// SetAmountY sets field value
func (o *GetVaultTVL) SetAmountY(v int32) {
	o.AmountY = v
}

// GetAmountXUsd returns the AmountXUsd field value
func (o *GetVaultTVL) GetAmountXUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AmountXUsd
}

// GetAmountXUsdOk returns a tuple with the AmountXUsd field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetAmountXUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountXUsd, true
}

// SetAmountXUsd sets field value
func (o *GetVaultTVL) SetAmountXUsd(v float32) {
	o.AmountXUsd = v
}

// GetAmountYUsd returns the AmountYUsd field value
func (o *GetVaultTVL) GetAmountYUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AmountYUsd
}

// GetAmountYUsdOk returns a tuple with the AmountYUsd field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetAmountYUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountYUsd, true
}

// SetAmountYUsd sets field value
func (o *GetVaultTVL) SetAmountYUsd(v float32) {
	o.AmountYUsd = v
}

// GetTvlUsd returns the TvlUsd field value
func (o *GetVaultTVL) GetTvlUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TvlUsd
}

// GetTvlUsdOk returns a tuple with the TvlUsd field value
// and a boolean to check if the value has been set.
func (o *GetVaultTVL) GetTvlUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TvlUsd, true
}

// SetTvlUsd sets field value
func (o *GetVaultTVL) SetTvlUsd(v float32) {
	o.TvlUsd = v
}

func (o GetVaultTVL) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVaultTVL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["amountX"] = o.AmountX
	toSerialize["amountY"] = o.AmountY
	toSerialize["amountXUsd"] = o.AmountXUsd
	toSerialize["amountYUsd"] = o.AmountYUsd
	toSerialize["tvlUsd"] = o.TvlUsd

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetVaultTVL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"timestamp",
		"amountX",
		"amountY",
		"amountXUsd",
		"amountYUsd",
		"tvlUsd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetVaultTVL := _GetVaultTVL{}

	err = json.Unmarshal(data, &varGetVaultTVL)

	if err != nil {
		return err
	}

	*o = GetVaultTVL(varGetVaultTVL)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "amountX")
		delete(additionalProperties, "amountY")
		delete(additionalProperties, "amountXUsd")
		delete(additionalProperties, "amountYUsd")
		delete(additionalProperties, "tvlUsd")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetVaultTVL struct {
	value *GetVaultTVL
	isSet bool
}

func (v NullableGetVaultTVL) Get() *GetVaultTVL {
	return v.value
}

func (v *NullableGetVaultTVL) Set(val *GetVaultTVL) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVaultTVL) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVaultTVL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVaultTVL(val *GetVaultTVL) *NullableGetVaultTVL {
	return &NullableGetVaultTVL{value: val, isSet: true}
}

func (v NullableGetVaultTVL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVaultTVL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
