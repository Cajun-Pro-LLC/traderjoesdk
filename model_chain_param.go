/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// ChainParam An enumeration.
type ChainParam string

// List of ChainParam
const (
	CHAIN_ALL       ChainParam = "all"
	CHAIN_AVALANCHE ChainParam = "avalanche"
	CHAIN_ARBITRUM  ChainParam = "arbitrum"
	CHAIN_BINANCE   ChainParam = "binance"
	CHAIN_SPRUCE    ChainParam = "spruce"
	CHAIN_ETHEREUM  ChainParam = "ethereum"
	CHAIN_MANTLE    ChainParam = "mantle"
)

// All allowed values of ChainParam enum
var AllowedChainParamEnumValues = []ChainParam{
	"all",
	"avalanche",
	"arbitrum",
	"binance",
	"spruce",
	"ethereum",
	"mantle",
}

func (v *ChainParam) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChainParam(value)
	for _, existing := range AllowedChainParamEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChainParam", value)
}

// NewChainParamFromValue returns a pointer to a valid ChainParam
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainParamFromValue(v string) (*ChainParam, error) {
	ev := ChainParam(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChainParam: valid values are %v", v, AllowedChainParamEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChainParam) IsValid() bool {
	for _, existing := range AllowedChainParamEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChainParam value
func (v ChainParam) Ptr() *ChainParam {
	return &v
}

type NullableChainParam struct {
	value *ChainParam
	isSet bool
}

func (v NullableChainParam) Get() *ChainParam {
	return v.value
}

func (v *NullableChainParam) Set(val *ChainParam) {
	v.value = val
	v.isSet = true
}

func (v NullableChainParam) IsSet() bool {
	return v.isSet
}

func (v *NullableChainParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainParam(val *ChainParam) *NullableChainParam {
	return &NullableChainParam{value: val, isSet: true}
}

func (v NullableChainParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
