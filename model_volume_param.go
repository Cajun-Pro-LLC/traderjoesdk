/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// VolumeParam An enumeration
type VolumeParam string

// List of VolumeParam
const (
	VOLUME VolumeParam = "volume"
)

// All allowed values of VolumeParam enum
var AllowedVolumeParamEnumValues = []VolumeParam{
	"volume",
}

func (v *VolumeParam) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeParam(value)
	for _, existing := range AllowedVolumeParamEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeParam", value)
}

// NewVolumeParamFromValue returns a pointer to a valid VolumeParam
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeParamFromValue(v string) (*VolumeParam, error) {
	ev := VolumeParam(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeParam: valid values are %v", v, AllowedVolumeParamEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeParam) IsValid() bool {
	for _, existing := range AllowedVolumeParamEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeParam value
func (v VolumeParam) Ptr() *VolumeParam {
	return &v
}

type NullableVolumeParam struct {
	value *VolumeParam
	isSet bool
}

func (v NullableVolumeParam) Get() *VolumeParam {
	return v.value
}

func (v *NullableVolumeParam) Set(val *VolumeParam) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeParam) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeParam(val *VolumeParam) *NullableVolumeParam {
	return &NullableVolumeParam{value: val, isSet: true}
}

func (v NullableVolumeParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
