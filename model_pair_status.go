/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// PairStatus An enumeration.
type PairStatus string

// List of PairStatus
const (
	MAIN PairStatus = "main"
	OLD  PairStatus = "old"
)

// All allowed values of PairStatus enum
var AllowedPairStatusEnumValues = []PairStatus{
	"main",
	"old",
}

func (v *PairStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PairStatus(value)
	for _, existing := range AllowedPairStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PairStatus", value)
}

// NewPairStatusFromValue returns a pointer to a valid PairStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPairStatusFromValue(v string) (*PairStatus, error) {
	ev := PairStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PairStatus: valid values are %v", v, AllowedPairStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PairStatus) IsValid() bool {
	for _, existing := range AllowedPairStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PairStatus value
func (v PairStatus) Ptr() *PairStatus {
	return &v
}

type NullablePairStatus struct {
	value *PairStatus
	isSet bool
}

func (v NullablePairStatus) Get() *PairStatus {
	return v.value
}

func (v *NullablePairStatus) Set(val *PairStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePairStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePairStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairStatus(val *PairStatus) *NullablePairStatus {
	return &NullablePairStatus{value: val, isSet: true}
}

func (v NullablePairStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
