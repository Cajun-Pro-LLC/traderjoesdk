/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// LeaderboardSortType An enumeration.
type LeaderboardSortType string

// List of LeaderboardSortType
const (
	leaderboard_fees   LeaderboardSortType = "fees"
	leaderboard_volume LeaderboardSortType = "volume"
)

// All allowed values of LeaderboardSortType enum
var AllowedLeaderboardSortTypeEnumValues = []LeaderboardSortType{
	"fees",
	"volume",
}

func (v *LeaderboardSortType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LeaderboardSortType(value)
	for _, existing := range AllowedLeaderboardSortTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LeaderboardSortType", value)
}

// NewLeaderboardSortTypeFromValue returns a pointer to a valid LeaderboardSortType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLeaderboardSortTypeFromValue(v string) (*LeaderboardSortType, error) {
	ev := LeaderboardSortType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LeaderboardSortType: valid values are %v", v, AllowedLeaderboardSortTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LeaderboardSortType) IsValid() bool {
	for _, existing := range AllowedLeaderboardSortTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LeaderboardSortType value
func (v LeaderboardSortType) Ptr() *LeaderboardSortType {
	return &v
}

type NullableLeaderboardSortType struct {
	value *LeaderboardSortType
	isSet bool
}

func (v NullableLeaderboardSortType) Get() *LeaderboardSortType {
	return v.value
}

func (v *NullableLeaderboardSortType) Set(val *LeaderboardSortType) {
	v.value = val
	v.isSet = true
}

func (v NullableLeaderboardSortType) IsSet() bool {
	return v.isSet
}

func (v *NullableLeaderboardSortType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeaderboardSortType(val *LeaderboardSortType) *NullableLeaderboardSortType {
	return &NullableLeaderboardSortType{value: val, isSet: true}
}

func (v NullableLeaderboardSortType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeaderboardSortType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
