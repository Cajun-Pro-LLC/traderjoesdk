/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// QueryStatus An enumeration.
type QueryStatus string

// List of QueryStatus
const (
	QUERY_STATUS_ALL  QueryStatus = "all"
	QUERY_STATUS_MAIN QueryStatus = "main"
	QUERY_STATUS_OLD  QueryStatus = "old"
)

// All allowed values of QueryStatus enum
var AllowedQueryStatusEnumValues = []QueryStatus{
	"all",
	"main",
	"old",
}

func (v *QueryStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryStatus(value)
	for _, existing := range AllowedQueryStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryStatus", value)
}

// NewQueryStatusFromValue returns a pointer to a valid QueryStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryStatusFromValue(v string) (*QueryStatus, error) {
	ev := QueryStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryStatus: valid values are %v", v, AllowedQueryStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryStatus) IsValid() bool {
	for _, existing := range AllowedQueryStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryStatus value
func (v QueryStatus) Ptr() *QueryStatus {
	return &v
}

type NullableQueryStatus struct {
	value *QueryStatus
	isSet bool
}

func (v NullableQueryStatus) Get() *QueryStatus {
	return v.value
}

func (v *NullableQueryStatus) Set(val *QueryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryStatus(val *QueryStatus) *NullableQueryStatus {
	return &NullableQueryStatus{value: val, isSet: true}
}

func (v NullableQueryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
