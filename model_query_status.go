/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QueryStatus - An enumeration.
type QueryStatus struct {
	AllParam   *AllParam
	PairStatus *PairStatus
}

// AllParamAsQueryStatus is a convenience function that returns AllParam wrapped in QueryStatus
func AllParamAsQueryStatus(v *AllParam) QueryStatus {
	return QueryStatus{
		AllParam: v,
	}
}

// PairStatusAsQueryStatus is a convenience function that returns PairStatus wrapped in QueryStatus
func PairStatusAsQueryStatus(v *PairStatus) QueryStatus {
	return QueryStatus{
		PairStatus: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *QueryStatus) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllParam
	err = newStrictDecoder(data).Decode(&dst.AllParam)
	if err == nil {
		jsonAllParam, _ := json.Marshal(dst.AllParam)
		if string(jsonAllParam) == "{}" { // empty struct
			dst.AllParam = nil
		} else {
			if err = validator.Validate(dst.AllParam); err != nil {
				dst.AllParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.AllParam = nil
	}

	// try to unmarshal data into PairStatus
	err = newStrictDecoder(data).Decode(&dst.PairStatus)
	if err == nil {
		jsonPairStatus, _ := json.Marshal(dst.PairStatus)
		if string(jsonPairStatus) == "{}" { // empty struct
			dst.PairStatus = nil
		} else {
			if err = validator.Validate(dst.PairStatus); err != nil {
				dst.PairStatus = nil
			} else {
				match++
			}
		}
	} else {
		dst.PairStatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllParam = nil
		dst.PairStatus = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QueryStatus)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QueryStatus)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QueryStatus) MarshalJSON() ([]byte, error) {
	if src.AllParam != nil {
		return json.Marshal(&src.AllParam)
	}

	if src.PairStatus != nil {
		return json.Marshal(&src.PairStatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QueryStatus) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AllParam != nil {
		return obj.AllParam
	}

	if obj.PairStatus != nil {
		return obj.PairStatus
	}

	// all schemas are nil
	return nil
}

type NullableQueryStatus struct {
	value *QueryStatus
	isSet bool
}

func (v NullableQueryStatus) Get() *QueryStatus {
	return v.value
}

func (v *NullableQueryStatus) Set(val *QueryStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryStatus(val *QueryStatus) *NullableQueryStatus {
	return &NullableQueryStatus{value: val, isSet: true}
}

func (v NullableQueryStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
