/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// FilterType An enumeration.
type FilterType string

// List of FilterType
const (
	_1H  FilterType = "1h"
	_1D  FilterType = "1d"
	_7D  FilterType = "7d"
	_14D FilterType = "14d"
	_30D FilterType = "30d"
)

// All allowed values of FilterType enum
var AllowedFilterTypeEnumValues = []FilterType{
	"1h",
	"1d",
	"7d",
	"14d",
	"30d",
}

func (v *FilterType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterType(value)
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterType", value)
}

// NewFilterTypeFromValue returns a pointer to a valid FilterType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterTypeFromValue(v string) (*FilterType, error) {
	ev := FilterType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterType: valid values are %v", v, AllowedFilterTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterType) IsValid() bool {
	for _, existing := range AllowedFilterTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterType value
func (v FilterType) Ptr() *FilterType {
	return &v
}

type NullableFilterType struct {
	value *FilterType
	isSet bool
}

func (v NullableFilterType) Get() *FilterType {
	return v.value
}

func (v *NullableFilterType) Set(val *FilterType) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterType) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterType(val *FilterType) *NullableFilterType {
	return &NullableFilterType{value: val, isSet: true}
}

func (v NullableFilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
