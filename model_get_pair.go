/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPair{}

// GetPair struct for GetPair
type GetPair struct {
	PairAddress          string       `json:"pairAddress"`
	Chain                Chain        `json:"chain"`
	Name                 string       `json:"name"`
	Status               PairStatus   `json:"status"`
	Version              PairVersion  `json:"version"`
	TokenX               TokenWrapper `json:"tokenX"`
	TokenY               TokenWrapper `json:"tokenY"`
	ReserveX             float32      `json:"reserveX"`
	ReserveY             float32      `json:"reserveY"`
	LbBinStep            int32        `json:"lbBinStep"`
	LbBaseFeePct         float32      `json:"lbBaseFeePct"`
	LbMaxFeePct          float32      `json:"lbMaxFeePct"`
	ActiveBinId          *int32       `json:"activeBinId,omitempty"`
	LiquidityUsd         float32      `json:"liquidityUsd"`
	LiquidityNative      string       `json:"liquidityNative"`
	LiquidityDepthMinus  float32      `json:"liquidityDepthMinus"`
	LiquidityDepthPlus   float32      `json:"liquidityDepthPlus"`
	LiquidityDepthTokenX float32      `json:"liquidityDepthTokenX"`
	LiquidityDepthTokenY float32      `json:"liquidityDepthTokenY"`
	VolumeUsd            float32      `json:"volumeUsd"`
	VolumeNative         string       `json:"volumeNative"`
	FeesUsd              float32      `json:"feesUsd"`
	FeesNative           string       `json:"feesNative"`
	ProtocolSharePct     *float32     `json:"protocolSharePct,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetPair GetPair

// NewGetPair instantiates a new GetPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPair(pairAddress string, chain Chain, name string, status PairStatus, version PairVersion, tokenX TokenWrapper, tokenY TokenWrapper, reserveX float32, reserveY float32, lbBinStep int32, lbBaseFeePct float32, lbMaxFeePct float32, liquidityUsd float32, liquidityNative string, liquidityDepthMinus float32, liquidityDepthPlus float32, liquidityDepthTokenX float32, liquidityDepthTokenY float32, volumeUsd float32, volumeNative string, feesUsd float32, feesNative string) *GetPair {
	this := GetPair{}
	this.PairAddress = pairAddress
	this.Chain = chain
	this.Name = name
	this.Status = status
	this.Version = version
	this.TokenX = tokenX
	this.TokenY = tokenY
	this.ReserveX = reserveX
	this.ReserveY = reserveY
	this.LbBinStep = lbBinStep
	this.LbBaseFeePct = lbBaseFeePct
	this.LbMaxFeePct = lbMaxFeePct
	this.LiquidityUsd = liquidityUsd
	this.LiquidityNative = liquidityNative
	this.LiquidityDepthMinus = liquidityDepthMinus
	this.LiquidityDepthPlus = liquidityDepthPlus
	this.LiquidityDepthTokenX = liquidityDepthTokenX
	this.LiquidityDepthTokenY = liquidityDepthTokenY
	this.VolumeUsd = volumeUsd
	this.VolumeNative = volumeNative
	this.FeesUsd = feesUsd
	this.FeesNative = feesNative
	return &this
}

// NewGetPairWithDefaults instantiates a new GetPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPairWithDefaults() *GetPair {
	this := GetPair{}
	return &this
}

// GetPairAddress returns the PairAddress field value
func (o *GetPair) GetPairAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PairAddress
}

// GetPairAddressOk returns a tuple with the PairAddress field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetPairAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PairAddress, true
}

// SetPairAddress sets field value
func (o *GetPair) SetPairAddress(v string) {
	o.PairAddress = v
}

// GetChain returns the Chain field value
func (o *GetPair) GetChain() Chain {
	if o == nil {
		var ret Chain
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetChainOk() (*Chain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *GetPair) SetChain(v Chain) {
	o.Chain = v
}

// GetName returns the Name field value
func (o *GetPair) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetPair) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *GetPair) GetStatus() PairStatus {
	if o == nil {
		var ret PairStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetStatusOk() (*PairStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetPair) SetStatus(v PairStatus) {
	o.Status = v
}

// GetVersion returns the Version field value
func (o *GetPair) GetVersion() PairVersion {
	if o == nil {
		var ret PairVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetVersionOk() (*PairVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *GetPair) SetVersion(v PairVersion) {
	o.Version = v
}

// GetTokenX returns the TokenX field value
func (o *GetPair) GetTokenX() TokenWrapper {
	if o == nil {
		var ret TokenWrapper
		return ret
	}

	return o.TokenX
}

// GetTokenXOk returns a tuple with the TokenX field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetTokenXOk() (*TokenWrapper, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenX, true
}

// SetTokenX sets field value
func (o *GetPair) SetTokenX(v TokenWrapper) {
	o.TokenX = v
}

// GetTokenY returns the TokenY field value
func (o *GetPair) GetTokenY() TokenWrapper {
	if o == nil {
		var ret TokenWrapper
		return ret
	}

	return o.TokenY
}

// GetTokenYOk returns a tuple with the TokenY field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetTokenYOk() (*TokenWrapper, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenY, true
}

// SetTokenY sets field value
func (o *GetPair) SetTokenY(v TokenWrapper) {
	o.TokenY = v
}

// GetReserveX returns the ReserveX field value
func (o *GetPair) GetReserveX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReserveX
}

// GetReserveXOk returns a tuple with the ReserveX field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetReserveXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReserveX, true
}

// SetReserveX sets field value
func (o *GetPair) SetReserveX(v float32) {
	o.ReserveX = v
}

// GetReserveY returns the ReserveY field value
func (o *GetPair) GetReserveY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReserveY
}

// GetReserveYOk returns a tuple with the ReserveY field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetReserveYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReserveY, true
}

// SetReserveY sets field value
func (o *GetPair) SetReserveY(v float32) {
	o.ReserveY = v
}

// GetLbBinStep returns the LbBinStep field value
func (o *GetPair) GetLbBinStep() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LbBinStep
}

// GetLbBinStepOk returns a tuple with the LbBinStep field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLbBinStepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbBinStep, true
}

// SetLbBinStep sets field value
func (o *GetPair) SetLbBinStep(v int32) {
	o.LbBinStep = v
}

// GetLbBaseFeePct returns the LbBaseFeePct field value
func (o *GetPair) GetLbBaseFeePct() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LbBaseFeePct
}

// GetLbBaseFeePctOk returns a tuple with the LbBaseFeePct field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLbBaseFeePctOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbBaseFeePct, true
}

// SetLbBaseFeePct sets field value
func (o *GetPair) SetLbBaseFeePct(v float32) {
	o.LbBaseFeePct = v
}

// GetLbMaxFeePct returns the LbMaxFeePct field value
func (o *GetPair) GetLbMaxFeePct() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LbMaxFeePct
}

// GetLbMaxFeePctOk returns a tuple with the LbMaxFeePct field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLbMaxFeePctOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbMaxFeePct, true
}

// SetLbMaxFeePct sets field value
func (o *GetPair) SetLbMaxFeePct(v float32) {
	o.LbMaxFeePct = v
}

// GetActiveBinId returns the ActiveBinId field value if set, zero value otherwise.
func (o *GetPair) GetActiveBinId() int32 {
	if o == nil || IsNil(o.ActiveBinId) {
		var ret int32
		return ret
	}
	return *o.ActiveBinId
}

// GetActiveBinIdOk returns a tuple with the ActiveBinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPair) GetActiveBinIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ActiveBinId) {
		return nil, false
	}
	return o.ActiveBinId, true
}

// HasActiveBinId returns a boolean if a field has been set.
func (o *GetPair) HasActiveBinId() bool {
	if o != nil && !IsNil(o.ActiveBinId) {
		return true
	}

	return false
}

// SetActiveBinId gets a reference to the given int32 and assigns it to the ActiveBinId field.
func (o *GetPair) SetActiveBinId(v int32) {
	o.ActiveBinId = &v
}

// GetLiquidityUsd returns the LiquidityUsd field value
func (o *GetPair) GetLiquidityUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LiquidityUsd
}

// GetLiquidityUsdOk returns a tuple with the LiquidityUsd field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityUsd, true
}

// SetLiquidityUsd sets field value
func (o *GetPair) SetLiquidityUsd(v float32) {
	o.LiquidityUsd = v
}

// GetLiquidityNative returns the LiquidityNative field value
func (o *GetPair) GetLiquidityNative() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LiquidityNative
}

// GetLiquidityNativeOk returns a tuple with the LiquidityNative field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityNativeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityNative, true
}

// SetLiquidityNative sets field value
func (o *GetPair) SetLiquidityNative(v string) {
	o.LiquidityNative = v
}

// GetLiquidityDepthMinus returns the LiquidityDepthMinus field value
func (o *GetPair) GetLiquidityDepthMinus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LiquidityDepthMinus
}

// GetLiquidityDepthMinusOk returns a tuple with the LiquidityDepthMinus field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityDepthMinusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityDepthMinus, true
}

// SetLiquidityDepthMinus sets field value
func (o *GetPair) SetLiquidityDepthMinus(v float32) {
	o.LiquidityDepthMinus = v
}

// GetLiquidityDepthPlus returns the LiquidityDepthPlus field value
func (o *GetPair) GetLiquidityDepthPlus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LiquidityDepthPlus
}

// GetLiquidityDepthPlusOk returns a tuple with the LiquidityDepthPlus field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityDepthPlusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityDepthPlus, true
}

// SetLiquidityDepthPlus sets field value
func (o *GetPair) SetLiquidityDepthPlus(v float32) {
	o.LiquidityDepthPlus = v
}

// GetLiquidityDepthTokenX returns the LiquidityDepthTokenX field value
func (o *GetPair) GetLiquidityDepthTokenX() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LiquidityDepthTokenX
}

// GetLiquidityDepthTokenXOk returns a tuple with the LiquidityDepthTokenX field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityDepthTokenXOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityDepthTokenX, true
}

// SetLiquidityDepthTokenX sets field value
func (o *GetPair) SetLiquidityDepthTokenX(v float32) {
	o.LiquidityDepthTokenX = v
}

// GetLiquidityDepthTokenY returns the LiquidityDepthTokenY field value
func (o *GetPair) GetLiquidityDepthTokenY() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LiquidityDepthTokenY
}

// GetLiquidityDepthTokenYOk returns a tuple with the LiquidityDepthTokenY field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetLiquidityDepthTokenYOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquidityDepthTokenY, true
}

// SetLiquidityDepthTokenY sets field value
func (o *GetPair) SetLiquidityDepthTokenY(v float32) {
	o.LiquidityDepthTokenY = v
}

// GetVolumeUsd returns the VolumeUsd field value
func (o *GetPair) GetVolumeUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VolumeUsd
}

// GetVolumeUsdOk returns a tuple with the VolumeUsd field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetVolumeUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeUsd, true
}

// SetVolumeUsd sets field value
func (o *GetPair) SetVolumeUsd(v float32) {
	o.VolumeUsd = v
}

// GetVolumeNative returns the VolumeNative field value
func (o *GetPair) GetVolumeNative() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeNative
}

// GetVolumeNativeOk returns a tuple with the VolumeNative field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetVolumeNativeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeNative, true
}

// SetVolumeNative sets field value
func (o *GetPair) SetVolumeNative(v string) {
	o.VolumeNative = v
}

// GetFeesUsd returns the FeesUsd field value
func (o *GetPair) GetFeesUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FeesUsd
}

// GetFeesUsdOk returns a tuple with the FeesUsd field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetFeesUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeesUsd, true
}

// SetFeesUsd sets field value
func (o *GetPair) SetFeesUsd(v float32) {
	o.FeesUsd = v
}

// GetFeesNative returns the FeesNative field value
func (o *GetPair) GetFeesNative() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeesNative
}

// GetFeesNativeOk returns a tuple with the FeesNative field value
// and a boolean to check if the value has been set.
func (o *GetPair) GetFeesNativeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeesNative, true
}

// SetFeesNative sets field value
func (o *GetPair) SetFeesNative(v string) {
	o.FeesNative = v
}

// GetProtocolSharePct returns the ProtocolSharePct field value if set, zero value otherwise.
func (o *GetPair) GetProtocolSharePct() float32 {
	if o == nil || IsNil(o.ProtocolSharePct) {
		var ret float32
		return ret
	}
	return *o.ProtocolSharePct
}

// GetProtocolSharePctOk returns a tuple with the ProtocolSharePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPair) GetProtocolSharePctOk() (*float32, bool) {
	if o == nil || IsNil(o.ProtocolSharePct) {
		return nil, false
	}
	return o.ProtocolSharePct, true
}

// HasProtocolSharePct returns a boolean if a field has been set.
func (o *GetPair) HasProtocolSharePct() bool {
	if o != nil && !IsNil(o.ProtocolSharePct) {
		return true
	}

	return false
}

// SetProtocolSharePct gets a reference to the given float32 and assigns it to the ProtocolSharePct field.
func (o *GetPair) SetProtocolSharePct(v float32) {
	o.ProtocolSharePct = &v
}

func (o GetPair) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pairAddress"] = o.PairAddress
	toSerialize["chain"] = o.Chain
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["version"] = o.Version
	toSerialize["tokenX"] = o.TokenX
	toSerialize["tokenY"] = o.TokenY
	toSerialize["reserveX"] = o.ReserveX
	toSerialize["reserveY"] = o.ReserveY
	toSerialize["lbBinStep"] = o.LbBinStep
	toSerialize["lbBaseFeePct"] = o.LbBaseFeePct
	toSerialize["lbMaxFeePct"] = o.LbMaxFeePct
	if !IsNil(o.ActiveBinId) {
		toSerialize["activeBinId"] = o.ActiveBinId
	}
	toSerialize["liquidityUsd"] = o.LiquidityUsd
	toSerialize["liquidityNative"] = o.LiquidityNative
	toSerialize["liquidityDepthMinus"] = o.LiquidityDepthMinus
	toSerialize["liquidityDepthPlus"] = o.LiquidityDepthPlus
	toSerialize["liquidityDepthTokenX"] = o.LiquidityDepthTokenX
	toSerialize["liquidityDepthTokenY"] = o.LiquidityDepthTokenY
	toSerialize["volumeUsd"] = o.VolumeUsd
	toSerialize["volumeNative"] = o.VolumeNative
	toSerialize["feesUsd"] = o.FeesUsd
	toSerialize["feesNative"] = o.FeesNative
	if !IsNil(o.ProtocolSharePct) {
		toSerialize["protocolSharePct"] = o.ProtocolSharePct
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pairAddress",
		"chain",
		"name",
		"status",
		"version",
		"tokenX",
		"tokenY",
		"reserveX",
		"reserveY",
		"lbBinStep",
		"lbBaseFeePct",
		"lbMaxFeePct",
		"liquidityUsd",
		"liquidityNative",
		"liquidityDepthMinus",
		"liquidityDepthPlus",
		"liquidityDepthTokenX",
		"liquidityDepthTokenY",
		"volumeUsd",
		"volumeNative",
		"feesUsd",
		"feesNative",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetPair := _GetPair{}

	err = json.Unmarshal(data, &varGetPair)

	if err != nil {
		return err
	}

	*o = GetPair(varGetPair)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pairAddress")
		delete(additionalProperties, "chain")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "version")
		delete(additionalProperties, "tokenX")
		delete(additionalProperties, "tokenY")
		delete(additionalProperties, "reserveX")
		delete(additionalProperties, "reserveY")
		delete(additionalProperties, "lbBinStep")
		delete(additionalProperties, "lbBaseFeePct")
		delete(additionalProperties, "lbMaxFeePct")
		delete(additionalProperties, "activeBinId")
		delete(additionalProperties, "liquidityUsd")
		delete(additionalProperties, "liquidityNative")
		delete(additionalProperties, "liquidityDepthMinus")
		delete(additionalProperties, "liquidityDepthPlus")
		delete(additionalProperties, "liquidityDepthTokenX")
		delete(additionalProperties, "liquidityDepthTokenY")
		delete(additionalProperties, "volumeUsd")
		delete(additionalProperties, "volumeNative")
		delete(additionalProperties, "feesUsd")
		delete(additionalProperties, "feesNative")
		delete(additionalProperties, "protocolSharePct")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetPair struct {
	value *GetPair
	isSet bool
}

func (v NullableGetPair) Get() *GetPair {
	return v.value
}

func (v *NullableGetPair) Set(val *GetPair) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPair) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPair(val *GetPair) *NullableGetPair {
	return &NullableGetPair{value: val, isSet: true}
}

func (v NullableGetPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
