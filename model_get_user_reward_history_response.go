/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetUserRewardHistoryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserRewardHistoryResponse{}

// GetUserRewardHistoryResponse struct for GetUserRewardHistoryResponse
type GetUserRewardHistoryResponse struct {
	Epoch                int32             `json:"epoch"`
	EpochStart           int32             `json:"epochStart"`
	EpochEnd             int32             `json:"epochEnd"`
	Progress             float32           `json:"progress"`
	Rewards              []GetLBPairReward `json:"rewards"`
	AdditionalProperties map[string]interface{}
}

type _GetUserRewardHistoryResponse GetUserRewardHistoryResponse

// NewGetUserRewardHistoryResponse instantiates a new GetUserRewardHistoryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserRewardHistoryResponse(epoch int32, epochStart int32, epochEnd int32, progress float32, rewards []GetLBPairReward) *GetUserRewardHistoryResponse {
	this := GetUserRewardHistoryResponse{}
	this.Epoch = epoch
	this.EpochStart = epochStart
	this.EpochEnd = epochEnd
	this.Progress = progress
	this.Rewards = rewards
	return &this
}

// NewGetUserRewardHistoryResponseWithDefaults instantiates a new GetUserRewardHistoryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserRewardHistoryResponseWithDefaults() *GetUserRewardHistoryResponse {
	this := GetUserRewardHistoryResponse{}
	return &this
}

// GetEpoch returns the Epoch field value
func (o *GetUserRewardHistoryResponse) GetEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value
// and a boolean to check if the value has been set.
func (o *GetUserRewardHistoryResponse) GetEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epoch, true
}

// SetEpoch sets field value
func (o *GetUserRewardHistoryResponse) SetEpoch(v int32) {
	o.Epoch = v
}

// GetEpochStart returns the EpochStart field value
func (o *GetUserRewardHistoryResponse) GetEpochStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EpochStart
}

// GetEpochStartOk returns a tuple with the EpochStart field value
// and a boolean to check if the value has been set.
func (o *GetUserRewardHistoryResponse) GetEpochStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpochStart, true
}

// SetEpochStart sets field value
func (o *GetUserRewardHistoryResponse) SetEpochStart(v int32) {
	o.EpochStart = v
}

// GetEpochEnd returns the EpochEnd field value
func (o *GetUserRewardHistoryResponse) GetEpochEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EpochEnd
}

// GetEpochEndOk returns a tuple with the EpochEnd field value
// and a boolean to check if the value has been set.
func (o *GetUserRewardHistoryResponse) GetEpochEndOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpochEnd, true
}

// SetEpochEnd sets field value
func (o *GetUserRewardHistoryResponse) SetEpochEnd(v int32) {
	o.EpochEnd = v
}

// GetProgress returns the Progress field value
func (o *GetUserRewardHistoryResponse) GetProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *GetUserRewardHistoryResponse) GetProgressOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *GetUserRewardHistoryResponse) SetProgress(v float32) {
	o.Progress = v
}

// GetRewards returns the Rewards field value
func (o *GetUserRewardHistoryResponse) GetRewards() []GetLBPairReward {
	if o == nil {
		var ret []GetLBPairReward
		return ret
	}

	return o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value
// and a boolean to check if the value has been set.
func (o *GetUserRewardHistoryResponse) GetRewardsOk() ([]GetLBPairReward, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rewards, true
}

// SetRewards sets field value
func (o *GetUserRewardHistoryResponse) SetRewards(v []GetLBPairReward) {
	o.Rewards = v
}

func (o GetUserRewardHistoryResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserRewardHistoryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["epoch"] = o.Epoch
	toSerialize["epochStart"] = o.EpochStart
	toSerialize["epochEnd"] = o.EpochEnd
	toSerialize["progress"] = o.Progress
	toSerialize["rewards"] = o.Rewards

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetUserRewardHistoryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"epoch",
		"epochStart",
		"epochEnd",
		"progress",
		"rewards",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetUserRewardHistoryResponse := _GetUserRewardHistoryResponse{}

	err = json.Unmarshal(data, &varGetUserRewardHistoryResponse)

	if err != nil {
		return err
	}

	*o = GetUserRewardHistoryResponse(varGetUserRewardHistoryResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "epoch")
		delete(additionalProperties, "epochStart")
		delete(additionalProperties, "epochEnd")
		delete(additionalProperties, "progress")
		delete(additionalProperties, "rewards")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetUserRewardHistoryResponse struct {
	value *GetUserRewardHistoryResponse
	isSet bool
}

func (v NullableGetUserRewardHistoryResponse) Get() *GetUserRewardHistoryResponse {
	return v.value
}

func (v *NullableGetUserRewardHistoryResponse) Set(val *GetUserRewardHistoryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserRewardHistoryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserRewardHistoryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserRewardHistoryResponse(val *GetUserRewardHistoryResponse) *NullableGetUserRewardHistoryResponse {
	return &NullableGetUserRewardHistoryResponse{value: val, isSet: true}
}

func (v NullableGetUserRewardHistoryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserRewardHistoryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
