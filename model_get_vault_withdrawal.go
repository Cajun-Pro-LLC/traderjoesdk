/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetVaultWithdrawal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVaultWithdrawal{}

// GetVaultWithdrawal struct for GetVaultWithdrawal
type GetVaultWithdrawal struct {
	Chain                Chain  `json:"chain"`
	VaultAddress         string `json:"vaultAddress"`
	UserAddress          string `json:"userAddress"`
	Round                int32  `json:"round"`
	Shares               int32  `json:"shares"`
	AdditionalProperties map[string]interface{}
}

type _GetVaultWithdrawal GetVaultWithdrawal

// NewGetVaultWithdrawal instantiates a new GetVaultWithdrawal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVaultWithdrawal(chain Chain, vaultAddress string, userAddress string, round int32, shares int32) *GetVaultWithdrawal {
	this := GetVaultWithdrawal{}
	this.Chain = chain
	this.VaultAddress = vaultAddress
	this.UserAddress = userAddress
	this.Round = round
	this.Shares = shares
	return &this
}

// NewGetVaultWithdrawalWithDefaults instantiates a new GetVaultWithdrawal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVaultWithdrawalWithDefaults() *GetVaultWithdrawal {
	this := GetVaultWithdrawal{}
	return &this
}

// GetChain returns the Chain field value
func (o *GetVaultWithdrawal) GetChain() Chain {
	if o == nil {
		var ret Chain
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *GetVaultWithdrawal) GetChainOk() (*Chain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *GetVaultWithdrawal) SetChain(v Chain) {
	o.Chain = v
}

// GetVaultAddress returns the VaultAddress field value
func (o *GetVaultWithdrawal) GetVaultAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultAddress
}

// GetVaultAddressOk returns a tuple with the VaultAddress field value
// and a boolean to check if the value has been set.
func (o *GetVaultWithdrawal) GetVaultAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultAddress, true
}

// SetVaultAddress sets field value
func (o *GetVaultWithdrawal) SetVaultAddress(v string) {
	o.VaultAddress = v
}

// GetUserAddress returns the UserAddress field value
func (o *GetVaultWithdrawal) GetUserAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAddress
}

// GetUserAddressOk returns a tuple with the UserAddress field value
// and a boolean to check if the value has been set.
func (o *GetVaultWithdrawal) GetUserAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAddress, true
}

// SetUserAddress sets field value
func (o *GetVaultWithdrawal) SetUserAddress(v string) {
	o.UserAddress = v
}

// GetRound returns the Round field value
func (o *GetVaultWithdrawal) GetRound() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Round
}

// GetRoundOk returns a tuple with the Round field value
// and a boolean to check if the value has been set.
func (o *GetVaultWithdrawal) GetRoundOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Round, true
}

// SetRound sets field value
func (o *GetVaultWithdrawal) SetRound(v int32) {
	o.Round = v
}

// GetShares returns the Shares field value
func (o *GetVaultWithdrawal) GetShares() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value
// and a boolean to check if the value has been set.
func (o *GetVaultWithdrawal) GetSharesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shares, true
}

// SetShares sets field value
func (o *GetVaultWithdrawal) SetShares(v int32) {
	o.Shares = v
}

func (o GetVaultWithdrawal) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVaultWithdrawal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	toSerialize["vaultAddress"] = o.VaultAddress
	toSerialize["userAddress"] = o.UserAddress
	toSerialize["round"] = o.Round
	toSerialize["shares"] = o.Shares

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetVaultWithdrawal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"vaultAddress",
		"userAddress",
		"round",
		"shares",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetVaultWithdrawal := _GetVaultWithdrawal{}

	err = json.Unmarshal(data, &varGetVaultWithdrawal)

	if err != nil {
		return err
	}

	*o = GetVaultWithdrawal(varGetVaultWithdrawal)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "vaultAddress")
		delete(additionalProperties, "userAddress")
		delete(additionalProperties, "round")
		delete(additionalProperties, "shares")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetVaultWithdrawal struct {
	value *GetVaultWithdrawal
	isSet bool
}

func (v NullableGetVaultWithdrawal) Get() *GetVaultWithdrawal {
	return v.value
}

func (v *NullableGetVaultWithdrawal) Set(val *GetVaultWithdrawal) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVaultWithdrawal) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVaultWithdrawal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVaultWithdrawal(val *GetVaultWithdrawal) *NullableGetVaultWithdrawal {
	return &NullableGetVaultWithdrawal{value: val, isSet: true}
}

func (v NullableGetVaultWithdrawal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVaultWithdrawal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
