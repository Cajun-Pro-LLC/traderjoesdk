/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the HistoricalLpFeesEarned type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoricalLpFeesEarned{}

// HistoricalLpFeesEarned struct for HistoricalLpFeesEarned
type HistoricalLpFeesEarned struct {
	UserAddress             string `json:"userAddress"`
	AccruedFeesX            string `json:"accruedFeesX"`
	AccruedFeesY            string `json:"accruedFeesY"`
	AccruedFeesL            string `json:"accruedFeesL"`
	AccruedFeesUsd          string `json:"accruedFeesUsd"`
	VolumeTradedTokenX      string `json:"volumeTradedTokenX"`
	VolumeTradedTokenY      string `json:"volumeTradedTokenY"`
	VolumeTradedUsd         string `json:"volumeTradedUsd"`
	ShareVolumeTradedTokenX string `json:"shareVolumeTradedTokenX"`
	ShareVolumeTradedTokenY string `json:"shareVolumeTradedTokenY"`
	ShareVolumeTradedUsd    string `json:"shareVolumeTradedUsd"`
	AdditionalProperties    map[string]interface{}
}

type _HistoricalLpFeesEarned HistoricalLpFeesEarned

// NewHistoricalLpFeesEarned instantiates a new HistoricalLpFeesEarned object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalLpFeesEarned(userAddress string, accruedFeesX string, accruedFeesY string, accruedFeesL string, accruedFeesUsd string, volumeTradedTokenX string, volumeTradedTokenY string, volumeTradedUsd string, shareVolumeTradedTokenX string, shareVolumeTradedTokenY string, shareVolumeTradedUsd string) *HistoricalLpFeesEarned {
	this := HistoricalLpFeesEarned{}
	this.UserAddress = userAddress
	this.AccruedFeesX = accruedFeesX
	this.AccruedFeesY = accruedFeesY
	this.AccruedFeesL = accruedFeesL
	this.AccruedFeesUsd = accruedFeesUsd
	this.VolumeTradedTokenX = volumeTradedTokenX
	this.VolumeTradedTokenY = volumeTradedTokenY
	this.VolumeTradedUsd = volumeTradedUsd
	this.ShareVolumeTradedTokenX = shareVolumeTradedTokenX
	this.ShareVolumeTradedTokenY = shareVolumeTradedTokenY
	this.ShareVolumeTradedUsd = shareVolumeTradedUsd
	return &this
}

// NewHistoricalLpFeesEarnedWithDefaults instantiates a new HistoricalLpFeesEarned object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalLpFeesEarnedWithDefaults() *HistoricalLpFeesEarned {
	this := HistoricalLpFeesEarned{}
	return &this
}

// GetUserAddress returns the UserAddress field value
func (o *HistoricalLpFeesEarned) GetUserAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAddress
}

// GetUserAddressOk returns a tuple with the UserAddress field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetUserAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAddress, true
}

// SetUserAddress sets field value
func (o *HistoricalLpFeesEarned) SetUserAddress(v string) {
	o.UserAddress = v
}

// GetAccruedFeesX returns the AccruedFeesX field value
func (o *HistoricalLpFeesEarned) GetAccruedFeesX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccruedFeesX
}

// GetAccruedFeesXOk returns a tuple with the AccruedFeesX field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetAccruedFeesXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccruedFeesX, true
}

// SetAccruedFeesX sets field value
func (o *HistoricalLpFeesEarned) SetAccruedFeesX(v string) {
	o.AccruedFeesX = v
}

// GetAccruedFeesY returns the AccruedFeesY field value
func (o *HistoricalLpFeesEarned) GetAccruedFeesY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccruedFeesY
}

// GetAccruedFeesYOk returns a tuple with the AccruedFeesY field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetAccruedFeesYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccruedFeesY, true
}

// SetAccruedFeesY sets field value
func (o *HistoricalLpFeesEarned) SetAccruedFeesY(v string) {
	o.AccruedFeesY = v
}

// GetAccruedFeesL returns the AccruedFeesL field value
func (o *HistoricalLpFeesEarned) GetAccruedFeesL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccruedFeesL
}

// GetAccruedFeesLOk returns a tuple with the AccruedFeesL field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetAccruedFeesLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccruedFeesL, true
}

// SetAccruedFeesL sets field value
func (o *HistoricalLpFeesEarned) SetAccruedFeesL(v string) {
	o.AccruedFeesL = v
}

// GetAccruedFeesUsd returns the AccruedFeesUsd field value
func (o *HistoricalLpFeesEarned) GetAccruedFeesUsd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccruedFeesUsd
}

// GetAccruedFeesUsdOk returns a tuple with the AccruedFeesUsd field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetAccruedFeesUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccruedFeesUsd, true
}

// SetAccruedFeesUsd sets field value
func (o *HistoricalLpFeesEarned) SetAccruedFeesUsd(v string) {
	o.AccruedFeesUsd = v
}

// GetVolumeTradedTokenX returns the VolumeTradedTokenX field value
func (o *HistoricalLpFeesEarned) GetVolumeTradedTokenX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeTradedTokenX
}

// GetVolumeTradedTokenXOk returns a tuple with the VolumeTradedTokenX field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetVolumeTradedTokenXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTradedTokenX, true
}

// SetVolumeTradedTokenX sets field value
func (o *HistoricalLpFeesEarned) SetVolumeTradedTokenX(v string) {
	o.VolumeTradedTokenX = v
}

// GetVolumeTradedTokenY returns the VolumeTradedTokenY field value
func (o *HistoricalLpFeesEarned) GetVolumeTradedTokenY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeTradedTokenY
}

// GetVolumeTradedTokenYOk returns a tuple with the VolumeTradedTokenY field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetVolumeTradedTokenYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTradedTokenY, true
}

// SetVolumeTradedTokenY sets field value
func (o *HistoricalLpFeesEarned) SetVolumeTradedTokenY(v string) {
	o.VolumeTradedTokenY = v
}

// GetVolumeTradedUsd returns the VolumeTradedUsd field value
func (o *HistoricalLpFeesEarned) GetVolumeTradedUsd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeTradedUsd
}

// GetVolumeTradedUsdOk returns a tuple with the VolumeTradedUsd field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetVolumeTradedUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTradedUsd, true
}

// SetVolumeTradedUsd sets field value
func (o *HistoricalLpFeesEarned) SetVolumeTradedUsd(v string) {
	o.VolumeTradedUsd = v
}

// GetShareVolumeTradedTokenX returns the ShareVolumeTradedTokenX field value
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedTokenX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareVolumeTradedTokenX
}

// GetShareVolumeTradedTokenXOk returns a tuple with the ShareVolumeTradedTokenX field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedTokenXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareVolumeTradedTokenX, true
}

// SetShareVolumeTradedTokenX sets field value
func (o *HistoricalLpFeesEarned) SetShareVolumeTradedTokenX(v string) {
	o.ShareVolumeTradedTokenX = v
}

// GetShareVolumeTradedTokenY returns the ShareVolumeTradedTokenY field value
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedTokenY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareVolumeTradedTokenY
}

// GetShareVolumeTradedTokenYOk returns a tuple with the ShareVolumeTradedTokenY field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedTokenYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareVolumeTradedTokenY, true
}

// SetShareVolumeTradedTokenY sets field value
func (o *HistoricalLpFeesEarned) SetShareVolumeTradedTokenY(v string) {
	o.ShareVolumeTradedTokenY = v
}

// GetShareVolumeTradedUsd returns the ShareVolumeTradedUsd field value
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedUsd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareVolumeTradedUsd
}

// GetShareVolumeTradedUsdOk returns a tuple with the ShareVolumeTradedUsd field value
// and a boolean to check if the value has been set.
func (o *HistoricalLpFeesEarned) GetShareVolumeTradedUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareVolumeTradedUsd, true
}

// SetShareVolumeTradedUsd sets field value
func (o *HistoricalLpFeesEarned) SetShareVolumeTradedUsd(v string) {
	o.ShareVolumeTradedUsd = v
}

func (o HistoricalLpFeesEarned) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoricalLpFeesEarned) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userAddress"] = o.UserAddress
	toSerialize["accruedFeesX"] = o.AccruedFeesX
	toSerialize["accruedFeesY"] = o.AccruedFeesY
	toSerialize["accruedFeesL"] = o.AccruedFeesL
	toSerialize["accruedFeesUsd"] = o.AccruedFeesUsd
	toSerialize["volumeTradedTokenX"] = o.VolumeTradedTokenX
	toSerialize["volumeTradedTokenY"] = o.VolumeTradedTokenY
	toSerialize["volumeTradedUsd"] = o.VolumeTradedUsd
	toSerialize["shareVolumeTradedTokenX"] = o.ShareVolumeTradedTokenX
	toSerialize["shareVolumeTradedTokenY"] = o.ShareVolumeTradedTokenY
	toSerialize["shareVolumeTradedUsd"] = o.ShareVolumeTradedUsd

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HistoricalLpFeesEarned) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userAddress",
		"accruedFeesX",
		"accruedFeesY",
		"accruedFeesL",
		"accruedFeesUsd",
		"volumeTradedTokenX",
		"volumeTradedTokenY",
		"volumeTradedUsd",
		"shareVolumeTradedTokenX",
		"shareVolumeTradedTokenY",
		"shareVolumeTradedUsd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHistoricalLpFeesEarned := _HistoricalLpFeesEarned{}

	err = json.Unmarshal(data, &varHistoricalLpFeesEarned)

	if err != nil {
		return err
	}

	*o = HistoricalLpFeesEarned(varHistoricalLpFeesEarned)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userAddress")
		delete(additionalProperties, "accruedFeesX")
		delete(additionalProperties, "accruedFeesY")
		delete(additionalProperties, "accruedFeesL")
		delete(additionalProperties, "accruedFeesUsd")
		delete(additionalProperties, "volumeTradedTokenX")
		delete(additionalProperties, "volumeTradedTokenY")
		delete(additionalProperties, "volumeTradedUsd")
		delete(additionalProperties, "shareVolumeTradedTokenX")
		delete(additionalProperties, "shareVolumeTradedTokenY")
		delete(additionalProperties, "shareVolumeTradedUsd")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHistoricalLpFeesEarned struct {
	value *HistoricalLpFeesEarned
	isSet bool
}

func (v NullableHistoricalLpFeesEarned) Get() *HistoricalLpFeesEarned {
	return v.value
}

func (v *NullableHistoricalLpFeesEarned) Set(val *HistoricalLpFeesEarned) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalLpFeesEarned) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalLpFeesEarned) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalLpFeesEarned(val *HistoricalLpFeesEarned) *NullableHistoricalLpFeesEarned {
	return &NullableHistoricalLpFeesEarned{value: val, isSet: true}
}

func (v NullableHistoricalLpFeesEarned) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalLpFeesEarned) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
