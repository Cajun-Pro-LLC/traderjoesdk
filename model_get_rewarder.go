/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetRewarder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRewarder{}

// GetRewarder struct for GetRewarder
type GetRewarder struct {
	RewarderContract      string  `json:"rewarderContract"`
	RewarderTokenId       string  `json:"rewarderTokenId"`
	RewarderTokenName     string  `json:"rewarderTokenName"`
	RewarderTokenSymbol   string  `json:"rewarderTokenSymbol"`
	RewarderTokenDecimals int32   `json:"rewarderTokenDecimals"`
	RewarderTokenPerSec   float32 `json:"rewarderTokenPerSec"`
	RewarderApr1d         float32 `json:"rewarderApr1d"`
	AdditionalProperties  map[string]interface{}
}

type _GetRewarder GetRewarder

// NewGetRewarder instantiates a new GetRewarder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRewarder(rewarderContract string, rewarderTokenId string, rewarderTokenName string, rewarderTokenSymbol string, rewarderTokenDecimals int32, rewarderTokenPerSec float32, rewarderApr1d float32) *GetRewarder {
	this := GetRewarder{}
	this.RewarderContract = rewarderContract
	this.RewarderTokenId = rewarderTokenId
	this.RewarderTokenName = rewarderTokenName
	this.RewarderTokenSymbol = rewarderTokenSymbol
	this.RewarderTokenDecimals = rewarderTokenDecimals
	this.RewarderTokenPerSec = rewarderTokenPerSec
	this.RewarderApr1d = rewarderApr1d
	return &this
}

// NewGetRewarderWithDefaults instantiates a new GetRewarder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRewarderWithDefaults() *GetRewarder {
	this := GetRewarder{}
	return &this
}

// GetRewarderContract returns the RewarderContract field value
func (o *GetRewarder) GetRewarderContract() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewarderContract
}

// GetRewarderContractOk returns a tuple with the RewarderContract field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderContractOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderContract, true
}

// SetRewarderContract sets field value
func (o *GetRewarder) SetRewarderContract(v string) {
	o.RewarderContract = v
}

// GetRewarderTokenId returns the RewarderTokenId field value
func (o *GetRewarder) GetRewarderTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewarderTokenId
}

// GetRewarderTokenIdOk returns a tuple with the RewarderTokenId field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderTokenId, true
}

// SetRewarderTokenId sets field value
func (o *GetRewarder) SetRewarderTokenId(v string) {
	o.RewarderTokenId = v
}

// GetRewarderTokenName returns the RewarderTokenName field value
func (o *GetRewarder) GetRewarderTokenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewarderTokenName
}

// GetRewarderTokenNameOk returns a tuple with the RewarderTokenName field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderTokenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderTokenName, true
}

// SetRewarderTokenName sets field value
func (o *GetRewarder) SetRewarderTokenName(v string) {
	o.RewarderTokenName = v
}

// GetRewarderTokenSymbol returns the RewarderTokenSymbol field value
func (o *GetRewarder) GetRewarderTokenSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RewarderTokenSymbol
}

// GetRewarderTokenSymbolOk returns a tuple with the RewarderTokenSymbol field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderTokenSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderTokenSymbol, true
}

// SetRewarderTokenSymbol sets field value
func (o *GetRewarder) SetRewarderTokenSymbol(v string) {
	o.RewarderTokenSymbol = v
}

// GetRewarderTokenDecimals returns the RewarderTokenDecimals field value
func (o *GetRewarder) GetRewarderTokenDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RewarderTokenDecimals
}

// GetRewarderTokenDecimalsOk returns a tuple with the RewarderTokenDecimals field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderTokenDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderTokenDecimals, true
}

// SetRewarderTokenDecimals sets field value
func (o *GetRewarder) SetRewarderTokenDecimals(v int32) {
	o.RewarderTokenDecimals = v
}

// GetRewarderTokenPerSec returns the RewarderTokenPerSec field value
func (o *GetRewarder) GetRewarderTokenPerSec() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RewarderTokenPerSec
}

// GetRewarderTokenPerSecOk returns a tuple with the RewarderTokenPerSec field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderTokenPerSecOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderTokenPerSec, true
}

// SetRewarderTokenPerSec sets field value
func (o *GetRewarder) SetRewarderTokenPerSec(v float32) {
	o.RewarderTokenPerSec = v
}

// GetRewarderApr1d returns the RewarderApr1d field value
func (o *GetRewarder) GetRewarderApr1d() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RewarderApr1d
}

// GetRewarderApr1dOk returns a tuple with the RewarderApr1d field value
// and a boolean to check if the value has been set.
func (o *GetRewarder) GetRewarderApr1dOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewarderApr1d, true
}

// SetRewarderApr1d sets field value
func (o *GetRewarder) SetRewarderApr1d(v float32) {
	o.RewarderApr1d = v
}

func (o GetRewarder) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRewarder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rewarderContract"] = o.RewarderContract
	toSerialize["rewarderTokenId"] = o.RewarderTokenId
	toSerialize["rewarderTokenName"] = o.RewarderTokenName
	toSerialize["rewarderTokenSymbol"] = o.RewarderTokenSymbol
	toSerialize["rewarderTokenDecimals"] = o.RewarderTokenDecimals
	toSerialize["rewarderTokenPerSec"] = o.RewarderTokenPerSec
	toSerialize["rewarderApr1d"] = o.RewarderApr1d

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetRewarder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rewarderContract",
		"rewarderTokenId",
		"rewarderTokenName",
		"rewarderTokenSymbol",
		"rewarderTokenDecimals",
		"rewarderTokenPerSec",
		"rewarderApr1d",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRewarder := _GetRewarder{}

	err = json.Unmarshal(data, &varGetRewarder)

	if err != nil {
		return err
	}

	*o = GetRewarder(varGetRewarder)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rewarderContract")
		delete(additionalProperties, "rewarderTokenId")
		delete(additionalProperties, "rewarderTokenName")
		delete(additionalProperties, "rewarderTokenSymbol")
		delete(additionalProperties, "rewarderTokenDecimals")
		delete(additionalProperties, "rewarderTokenPerSec")
		delete(additionalProperties, "rewarderApr1d")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetRewarder struct {
	value *GetRewarder
	isSet bool
}

func (v NullableGetRewarder) Get() *GetRewarder {
	return v.value
}

func (v *NullableGetRewarder) Set(val *GetRewarder) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRewarder) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRewarder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRewarder(val *GetRewarder) *NullableGetRewarder {
	return &NullableGetRewarder{value: val, isSet: true}
}

func (v NullableGetRewarder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRewarder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
