/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// Chain An enumeration.
type Chain string

// List of Chain
const (
	AVALANCHE Chain = "avalanche"
	ARBITRUM  Chain = "arbitrum"
	BINANCE   Chain = "binance"
	SPRUCE    Chain = "spruce"
	ETHEREUM  Chain = "ethereum"
	MANTLE    Chain = "mantle"
)

// All allowed values of Chain enum
var AllowedChainEnumValues = []Chain{
	"avalanche",
	"arbitrum",
	"binance",
	"spruce",
	"ethereum",
	"mantle",
}

func (v *Chain) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Chain(value)
	for _, existing := range AllowedChainEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Chain", value)
}

// NewChainFromValue returns a pointer to a valid Chain
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainFromValue(v string) (*Chain, error) {
	ev := Chain(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Chain: valid values are %v", v, AllowedChainEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Chain) IsValid() bool {
	for _, existing := range AllowedChainEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Chain value
func (v Chain) Ptr() *Chain {
	return &v
}

type NullableChain struct {
	value *Chain
	isSet bool
}

func (v NullableChain) Get() *Chain {
	return v.value
}

func (v *NullableChain) Set(val *Chain) {
	v.value = val
	v.isSet = true
}

func (v NullableChain) IsSet() bool {
	return v.isSet
}

func (v *NullableChain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChain(val *Chain) *NullableChain {
	return &NullableChain{value: val, isSet: true}
}

func (v NullableChain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
