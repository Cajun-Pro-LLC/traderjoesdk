/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PairVersionParam - An enumeration.
type PairVersionParam struct {
	AllParam    *AllParam
	PairVersion *PairVersion
}

// AllParamAsPairVersionParam is a convenience function that returns AllParam wrapped in PairVersionParam
func AllParamAsPairVersionParam(v *AllParam) PairVersionParam {
	return PairVersionParam{
		AllParam: v,
	}
}

// PairVersionAsPairVersionParam is a convenience function that returns PairVersion wrapped in PairVersionParam
func PairVersionAsPairVersionParam(v *PairVersion) PairVersionParam {
	return PairVersionParam{
		PairVersion: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PairVersionParam) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AllParam
	err = newStrictDecoder(data).Decode(&dst.AllParam)
	if err == nil {
		jsonAllParam, _ := json.Marshal(dst.AllParam)
		if string(jsonAllParam) == "{}" { // empty struct
			dst.AllParam = nil
		} else {
			if err = validator.Validate(dst.AllParam); err != nil {
				dst.AllParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.AllParam = nil
	}

	// try to unmarshal data into PairVersion
	err = newStrictDecoder(data).Decode(&dst.PairVersion)
	if err == nil {
		jsonPairVersion, _ := json.Marshal(dst.PairVersion)
		if string(jsonPairVersion) == "{}" { // empty struct
			dst.PairVersion = nil
		} else {
			if err = validator.Validate(dst.PairVersion); err != nil {
				dst.PairVersion = nil
			} else {
				match++
			}
		}
	} else {
		dst.PairVersion = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AllParam = nil
		dst.PairVersion = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PairVersionParam)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PairVersionParam)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PairVersionParam) MarshalJSON() ([]byte, error) {
	if src.AllParam != nil {
		return json.Marshal(&src.AllParam)
	}

	if src.PairVersion != nil {
		return json.Marshal(&src.PairVersion)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PairVersionParam) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AllParam != nil {
		return obj.AllParam
	}

	if obj.PairVersion != nil {
		return obj.PairVersion
	}

	// all schemas are nil
	return nil
}

type NullablePairVersionParam struct {
	value *PairVersionParam
	isSet bool
}

func (v NullablePairVersionParam) Get() *PairVersionParam {
	return v.value
}

func (v *NullablePairVersionParam) Set(val *PairVersionParam) {
	v.value = val
	v.isSet = true
}

func (v NullablePairVersionParam) IsSet() bool {
	return v.isSet
}

func (v *NullablePairVersionParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairVersionParam(val *PairVersionParam) *NullablePairVersionParam {
	return &NullablePairVersionParam{value: val, isSet: true}
}

func (v NullablePairVersionParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairVersionParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
