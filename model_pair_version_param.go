/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// PairVersionParam An enumeration.
type PairVersionParam string

// List of PairVersionParam
const (
	PARAM_ALL  PairVersionParam = "all"
	PARAM_V2_0 PairVersionParam = "v2.0"
	PARAM_V2_1 PairVersionParam = "v2.1"
	PARAM_V2_2 PairVersionParam = "v2.2"
)

// All allowed values of PairVersionParam enum
var AllowedPairVersionParamEnumValues = []PairVersionParam{
	"all",
	"v2.0",
	"v2.1",
	"v2.2",
}

func (v *PairVersionParam) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PairVersionParam(value)
	for _, existing := range AllowedPairVersionParamEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PairVersionParam", value)
}

// NewPairVersionParamFromValue returns a pointer to a valid PairVersionParam
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPairVersionParamFromValue(v string) (*PairVersionParam, error) {
	ev := PairVersionParam(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PairVersionParam: valid values are %v", v, AllowedPairVersionParamEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PairVersionParam) IsValid() bool {
	for _, existing := range AllowedPairVersionParamEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PairVersionParam value
func (v PairVersionParam) Ptr() *PairVersionParam {
	return &v
}

type NullablePairVersionParam struct {
	value *PairVersionParam
	isSet bool
}

func (v NullablePairVersionParam) Get() *PairVersionParam {
	return v.value
}

func (v *NullablePairVersionParam) Set(val *PairVersionParam) {
	v.value = val
	v.isSet = true
}

func (v NullablePairVersionParam) IsSet() bool {
	return v.isSet
}

func (v *NullablePairVersionParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairVersionParam(val *PairVersionParam) *NullablePairVersionParam {
	return &NullablePairVersionParam{value: val, isSet: true}
}

func (v NullablePairVersionParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairVersionParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
