/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type UserAPI interface {

	/*
		GetUserFarmPosition Get User Farm Position

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@param vaultId
		@return ApiGetUserFarmPositionRequest
	*/
	GetUserFarmPosition(ctx context.Context, chain Chain, userAddress string, vaultId string) ApiGetUserFarmPositionRequest

	// GetUserFarmPositionExecute executes the request
	//  @return GetUserFarmPosition
	GetUserFarmPositionExecute(r ApiGetUserFarmPositionRequest) (*GetUserFarmPosition, *http.Response, error)

	/*
		GetUserFarmPositions Get User Farm Positions

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@return ApiGetUserFarmPositionsRequest
	*/
	GetUserFarmPositions(ctx context.Context, chain Chain, userAddress string) ApiGetUserFarmPositionsRequest

	// GetUserFarmPositionsExecute executes the request
	//  @return []GetUserFarmPosition
	GetUserFarmPositionsExecute(r ApiGetUserFarmPositionsRequest) ([]GetUserFarmPosition, *http.Response, error)

	/*
		GetUserPoolIds Get User Pool Ids

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userAddress
		@param chain
		@return ApiGetUserPoolIdsRequest
	*/
	GetUserPoolIds(ctx context.Context, userAddress string, chain Chain) ApiGetUserPoolIdsRequest

	// GetUserPoolIdsExecute executes the request
	//  @return []UserPoolPosition
	GetUserPoolIdsExecute(r ApiGetUserPoolIdsRequest) ([]UserPoolPosition, *http.Response, error)

	/*
		UserCurrentBinIds User Current Bin Ids

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param userAddress
		@param chain
		@param poolAddress
		@return ApiUserCurrentBinIdsRequest
	*/
	UserCurrentBinIds(ctx context.Context, userAddress string, chain Chain, poolAddress string) ApiUserCurrentBinIdsRequest

	// UserCurrentBinIdsExecute executes the request
	//  @return []int32
	UserCurrentBinIdsExecute(r ApiUserCurrentBinIdsRequest) ([]int32, *http.Response, error)

	/*
		UserEarnedFeesPerBin User Earned Fees Per Bin

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@param poolAddress
		@return ApiUserEarnedFeesPerBinRequest
	*/
	UserEarnedFeesPerBin(ctx context.Context, chain ChainParam, userAddress string, poolAddress string) ApiUserEarnedFeesPerBinRequest

	// UserEarnedFeesPerBinExecute executes the request
	//  @return []UserFeesEarnedPerBin
	UserEarnedFeesPerBinExecute(r ApiUserEarnedFeesPerBinRequest) ([]UserFeesEarnedPerBin, *http.Response, error)

	/*
		UserHistoricalPosition User Historical Position

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@param poolAddress
		@return ApiUserHistoricalPositionRequest
	*/
	UserHistoricalPosition(ctx context.Context, chain Chain, userAddress string, poolAddress string) ApiUserHistoricalPositionRequest

	// UserHistoricalPositionExecute executes the request
	//  @return []UserBinHistory
	UserHistoricalPositionExecute(r ApiUserHistoricalPositionRequest) ([]UserBinHistory, *http.Response, error)
}

// UserAPIService UserAPI service
type UserAPIService service

type ApiGetUserFarmPositionRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	chain       Chain
	userAddress string
	vaultId     string
}

func (r ApiGetUserFarmPositionRequest) Execute() (*GetUserFarmPosition, *http.Response, error) {
	return r.ApiService.GetUserFarmPositionExecute(r)
}

/*
GetUserFarmPosition Get User Farm Position

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@param vaultId
	@return ApiGetUserFarmPositionRequest
*/
func (a *UserAPIService) GetUserFarmPosition(ctx context.Context, chain Chain, userAddress string, vaultId string) ApiGetUserFarmPositionRequest {
	return ApiGetUserFarmPositionRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
		vaultId:     vaultId,
	}
}

// Execute executes the request
//
//	@return GetUserFarmPosition
func (a *UserAPIService) GetUserFarmPositionExecute(r ApiGetUserFarmPositionRequest) (*GetUserFarmPosition, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetUserFarmPosition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.GetUserFarmPosition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/{chain}/{user_address}/farms/{vault_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vault_id"+"}", url.PathEscape(parameterValueToString(r.vaultId, "vaultId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserFarmPositionsRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	chain       Chain
	userAddress string
}

func (r ApiGetUserFarmPositionsRequest) Execute() ([]GetUserFarmPosition, *http.Response, error) {
	return r.ApiService.GetUserFarmPositionsExecute(r)
}

/*
GetUserFarmPositions Get User Farm Positions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@return ApiGetUserFarmPositionsRequest
*/
func (a *UserAPIService) GetUserFarmPositions(ctx context.Context, chain Chain, userAddress string) ApiGetUserFarmPositionsRequest {
	return ApiGetUserFarmPositionsRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
	}
}

// Execute executes the request
//
//	@return []GetUserFarmPosition
func (a *UserAPIService) GetUserFarmPositionsExecute(r ApiGetUserFarmPositionsRequest) ([]GetUserFarmPosition, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []GetUserFarmPosition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.GetUserFarmPositions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/{chain}/{user_address}/farms"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserPoolIdsRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	userAddress string
	chain       Chain
	pageSize    *int32
	pageNum     *int32
}

func (r ApiGetUserPoolIdsRequest) PageSize(pageSize int32) ApiGetUserPoolIdsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetUserPoolIdsRequest) PageNum(pageNum int32) ApiGetUserPoolIdsRequest {
	r.pageNum = &pageNum
	return r
}

func (r ApiGetUserPoolIdsRequest) Execute() ([]UserPoolPosition, *http.Response, error) {
	return r.ApiService.GetUserPoolIdsExecute(r)
}

/*
GetUserPoolIds Get User Pool Ids

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userAddress
	@param chain
	@return ApiGetUserPoolIdsRequest
*/
func (a *UserAPIService) GetUserPoolIds(ctx context.Context, userAddress string, chain Chain) ApiGetUserPoolIdsRequest {
	return ApiGetUserPoolIdsRequest{
		ApiService:  a,
		ctx:         ctx,
		userAddress: userAddress,
		chain:       chain,
	}
}

// Execute executes the request
//
//	@return []UserPoolPosition
func (a *UserAPIService) GetUserPoolIdsExecute(r ApiGetUserPoolIdsRequest) ([]UserPoolPosition, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []UserPoolPosition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.GetUserPoolIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/pool-ids/{user_address}/{chain}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNum", r.pageNum, "")
	} else {
		var defaultValue int32 = 1
		r.pageNum = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserCurrentBinIdsRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	userAddress string
	chain       Chain
	poolAddress string
}

func (r ApiUserCurrentBinIdsRequest) Execute() ([]int32, *http.Response, error) {
	return r.ApiService.UserCurrentBinIdsExecute(r)
}

/*
UserCurrentBinIds User Current Bin Ids

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userAddress
	@param chain
	@param poolAddress
	@return ApiUserCurrentBinIdsRequest
*/
func (a *UserAPIService) UserCurrentBinIds(ctx context.Context, userAddress string, chain Chain, poolAddress string) ApiUserCurrentBinIdsRequest {
	return ApiUserCurrentBinIdsRequest{
		ApiService:  a,
		ctx:         ctx,
		userAddress: userAddress,
		chain:       chain,
		poolAddress: poolAddress,
	}
}

// Execute executes the request
//
//	@return []int32
func (a *UserAPIService) UserCurrentBinIdsExecute(r ApiUserCurrentBinIdsRequest) ([]int32, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.UserCurrentBinIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/bin-ids/{user_address}/{chain}/{pool_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pool_address"+"}", url.PathEscape(parameterValueToString(r.poolAddress, "poolAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserEarnedFeesPerBinRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	chain       ChainParam
	userAddress string
	poolAddress string
}

func (r ApiUserEarnedFeesPerBinRequest) Execute() ([]UserFeesEarnedPerBin, *http.Response, error) {
	return r.ApiService.UserEarnedFeesPerBinExecute(r)
}

/*
UserEarnedFeesPerBin User Earned Fees Per Bin

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@param poolAddress
	@return ApiUserEarnedFeesPerBinRequest
*/
func (a *UserAPIService) UserEarnedFeesPerBin(ctx context.Context, chain ChainParam, userAddress string, poolAddress string) ApiUserEarnedFeesPerBinRequest {
	return ApiUserEarnedFeesPerBinRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
		poolAddress: poolAddress,
	}
}

// Execute executes the request
//
//	@return []UserFeesEarnedPerBin
func (a *UserAPIService) UserEarnedFeesPerBinExecute(r ApiUserEarnedFeesPerBinRequest) ([]UserFeesEarnedPerBin, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []UserFeesEarnedPerBin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.UserEarnedFeesPerBin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/fees-earned/{chain}/{user_address}/{pool_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pool_address"+"}", url.PathEscape(parameterValueToString(r.poolAddress, "poolAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUserHistoricalPositionRequest struct {
	ctx         context.Context
	ApiService  UserAPI
	chain       Chain
	userAddress string
	poolAddress string
	startTime   *int32
	pageSize    *int32
	pageNum     *int32
	endTime     *int32
}

func (r ApiUserHistoricalPositionRequest) StartTime(startTime int32) ApiUserHistoricalPositionRequest {
	r.startTime = &startTime
	return r
}

func (r ApiUserHistoricalPositionRequest) PageSize(pageSize int32) ApiUserHistoricalPositionRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiUserHistoricalPositionRequest) PageNum(pageNum int32) ApiUserHistoricalPositionRequest {
	r.pageNum = &pageNum
	return r
}

func (r ApiUserHistoricalPositionRequest) EndTime(endTime int32) ApiUserHistoricalPositionRequest {
	r.endTime = &endTime
	return r
}

func (r ApiUserHistoricalPositionRequest) Execute() ([]UserBinHistory, *http.Response, error) {
	return r.ApiService.UserHistoricalPositionExecute(r)
}

/*
UserHistoricalPosition User Historical Position

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@param poolAddress
	@return ApiUserHistoricalPositionRequest
*/
func (a *UserAPIService) UserHistoricalPosition(ctx context.Context, chain Chain, userAddress string, poolAddress string) ApiUserHistoricalPositionRequest {
	return ApiUserHistoricalPositionRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
		poolAddress: poolAddress,
	}
}

// Execute executes the request
//
//	@return []UserBinHistory
func (a *UserAPIService) UserHistoricalPositionExecute(r ApiUserHistoricalPositionRequest) ([]UserBinHistory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []UserBinHistory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAPIService.UserHistoricalPosition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/user/{chain}/history/{user_address}/{pool_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pool_address"+"}", url.PathEscape(parameterValueToString(r.poolAddress, "poolAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	if r.pageNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNum", r.pageNum, "")
	} else {
		var defaultValue int32 = 1
		r.pageNum = &defaultValue
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
