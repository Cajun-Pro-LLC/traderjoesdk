/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VaultBinActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultBinActivity{}

// VaultBinActivity struct for VaultBinActivity
type VaultBinActivity struct {
	BinId                int32 `json:"binId"`
	AmountX              int32 `json:"amountX"`
	AmountY              int32 `json:"amountY"`
	AdditionalProperties map[string]interface{}
}

type _VaultBinActivity VaultBinActivity

// NewVaultBinActivity instantiates a new VaultBinActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultBinActivity(binId int32, amountX int32, amountY int32) *VaultBinActivity {
	this := VaultBinActivity{}
	this.BinId = binId
	this.AmountX = amountX
	this.AmountY = amountY
	return &this
}

// NewVaultBinActivityWithDefaults instantiates a new VaultBinActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultBinActivityWithDefaults() *VaultBinActivity {
	this := VaultBinActivity{}
	return &this
}

// GetBinId returns the BinId field value
func (o *VaultBinActivity) GetBinId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BinId
}

// GetBinIdOk returns a tuple with the BinId field value
// and a boolean to check if the value has been set.
func (o *VaultBinActivity) GetBinIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BinId, true
}

// SetBinId sets field value
func (o *VaultBinActivity) SetBinId(v int32) {
	o.BinId = v
}

// GetAmountX returns the AmountX field value
func (o *VaultBinActivity) GetAmountX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountX
}

// GetAmountXOk returns a tuple with the AmountX field value
// and a boolean to check if the value has been set.
func (o *VaultBinActivity) GetAmountXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountX, true
}

// SetAmountX sets field value
func (o *VaultBinActivity) SetAmountX(v int32) {
	o.AmountX = v
}

// GetAmountY returns the AmountY field value
func (o *VaultBinActivity) GetAmountY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AmountY
}

// GetAmountYOk returns a tuple with the AmountY field value
// and a boolean to check if the value has been set.
func (o *VaultBinActivity) GetAmountYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountY, true
}

// SetAmountY sets field value
func (o *VaultBinActivity) SetAmountY(v int32) {
	o.AmountY = v
}

func (o VaultBinActivity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultBinActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["binId"] = o.BinId
	toSerialize["amountX"] = o.AmountX
	toSerialize["amountY"] = o.AmountY

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VaultBinActivity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"binId",
		"amountX",
		"amountY",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVaultBinActivity := _VaultBinActivity{}

	err = json.Unmarshal(data, &varVaultBinActivity)

	if err != nil {
		return err
	}

	*o = VaultBinActivity(varVaultBinActivity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "binId")
		delete(additionalProperties, "amountX")
		delete(additionalProperties, "amountY")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVaultBinActivity struct {
	value *VaultBinActivity
	isSet bool
}

func (v NullableVaultBinActivity) Get() *VaultBinActivity {
	return v.value
}

func (v *NullableVaultBinActivity) Set(val *VaultBinActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultBinActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultBinActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultBinActivity(val *VaultBinActivity) *NullableVaultBinActivity {
	return &NullableVaultBinActivity{value: val, isSet: true}
}

func (v NullableVaultBinActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultBinActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
