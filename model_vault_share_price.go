/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VaultSharePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultSharePrice{}

// VaultSharePrice struct for VaultSharePrice
type VaultSharePrice struct {
	Chain                Chain     `json:"chain"`
	VaultAddress         string    `json:"vaultAddress"`
	BlockNumber          int32     `json:"blockNumber"`
	SharePrice           string    `json:"sharePrice"`
	Timestamp            time.Time `json:"timestamp"`
	AdditionalProperties map[string]interface{}
}

type _VaultSharePrice VaultSharePrice

// NewVaultSharePrice instantiates a new VaultSharePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultSharePrice(chain Chain, vaultAddress string, blockNumber int32, sharePrice string, timestamp time.Time) *VaultSharePrice {
	this := VaultSharePrice{}
	this.Chain = chain
	this.VaultAddress = vaultAddress
	this.BlockNumber = blockNumber
	this.SharePrice = sharePrice
	this.Timestamp = timestamp
	return &this
}

// NewVaultSharePriceWithDefaults instantiates a new VaultSharePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultSharePriceWithDefaults() *VaultSharePrice {
	this := VaultSharePrice{}
	return &this
}

// GetChain returns the Chain field value
func (o *VaultSharePrice) GetChain() Chain {
	if o == nil {
		var ret Chain
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *VaultSharePrice) GetChainOk() (*Chain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *VaultSharePrice) SetChain(v Chain) {
	o.Chain = v
}

// GetVaultAddress returns the VaultAddress field value
func (o *VaultSharePrice) GetVaultAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultAddress
}

// GetVaultAddressOk returns a tuple with the VaultAddress field value
// and a boolean to check if the value has been set.
func (o *VaultSharePrice) GetVaultAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultAddress, true
}

// SetVaultAddress sets field value
func (o *VaultSharePrice) SetVaultAddress(v string) {
	o.VaultAddress = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *VaultSharePrice) GetBlockNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *VaultSharePrice) GetBlockNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *VaultSharePrice) SetBlockNumber(v int32) {
	o.BlockNumber = v
}

// GetSharePrice returns the SharePrice field value
func (o *VaultSharePrice) GetSharePrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharePrice
}

// GetSharePriceOk returns a tuple with the SharePrice field value
// and a boolean to check if the value has been set.
func (o *VaultSharePrice) GetSharePriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharePrice, true
}

// SetSharePrice sets field value
func (o *VaultSharePrice) SetSharePrice(v string) {
	o.SharePrice = v
}

// GetTimestamp returns the Timestamp field value
func (o *VaultSharePrice) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *VaultSharePrice) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *VaultSharePrice) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

func (o VaultSharePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultSharePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain"] = o.Chain
	toSerialize["vaultAddress"] = o.VaultAddress
	toSerialize["blockNumber"] = o.BlockNumber
	toSerialize["sharePrice"] = o.SharePrice
	toSerialize["timestamp"] = o.Timestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VaultSharePrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain",
		"vaultAddress",
		"blockNumber",
		"sharePrice",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVaultSharePrice := _VaultSharePrice{}

	err = json.Unmarshal(data, &varVaultSharePrice)

	if err != nil {
		return err
	}

	*o = VaultSharePrice(varVaultSharePrice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chain")
		delete(additionalProperties, "vaultAddress")
		delete(additionalProperties, "blockNumber")
		delete(additionalProperties, "sharePrice")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVaultSharePrice struct {
	value *VaultSharePrice
	isSet bool
}

func (v NullableVaultSharePrice) Get() *VaultSharePrice {
	return v.value
}

func (v *NullableVaultSharePrice) Set(val *VaultSharePrice) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultSharePrice) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultSharePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultSharePrice(val *VaultSharePrice) *NullableVaultSharePrice {
	return &NullableVaultSharePrice{value: val, isSet: true}
}

func (v NullableVaultSharePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultSharePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
