/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the UserBinHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserBinHistory{}

// UserBinHistory struct for UserBinHistory
type UserBinHistory struct {
	PoolAddress          string                      `json:"poolAddress"`
	PairName             string                      `json:"pairName"`
	BinId                int32                       `json:"binId"`
	LbBinStep            float32                     `json:"lbBinStep"`
	LbBaseFeePct         float32                     `json:"lbBaseFeePct"`
	LbMaxFeePct          float32                     `json:"lbMaxFeePct"`
	TokenX               UserBinPositionTokenWrapper `json:"tokenX"`
	TokenY               UserBinPositionTokenWrapper `json:"tokenY"`
	IsDeposit            bool                        `json:"isDeposit"`
	Timestamp            time.Time                   `json:"timestamp"`
	BlockNumber          int32                       `json:"blockNumber"`
	AdditionalProperties map[string]interface{}
}

type _UserBinHistory UserBinHistory

// NewUserBinHistory instantiates a new UserBinHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBinHistory(poolAddress string, pairName string, binId int32, lbBinStep float32, lbBaseFeePct float32, lbMaxFeePct float32, tokenX UserBinPositionTokenWrapper, tokenY UserBinPositionTokenWrapper, isDeposit bool, timestamp time.Time, blockNumber int32) *UserBinHistory {
	this := UserBinHistory{}
	this.PoolAddress = poolAddress
	this.PairName = pairName
	this.BinId = binId
	this.LbBinStep = lbBinStep
	this.LbBaseFeePct = lbBaseFeePct
	this.LbMaxFeePct = lbMaxFeePct
	this.TokenX = tokenX
	this.TokenY = tokenY
	this.IsDeposit = isDeposit
	this.Timestamp = timestamp
	this.BlockNumber = blockNumber
	return &this
}

// NewUserBinHistoryWithDefaults instantiates a new UserBinHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBinHistoryWithDefaults() *UserBinHistory {
	this := UserBinHistory{}
	return &this
}

// GetPoolAddress returns the PoolAddress field value
func (o *UserBinHistory) GetPoolAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolAddress
}

// GetPoolAddressOk returns a tuple with the PoolAddress field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetPoolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolAddress, true
}

// SetPoolAddress sets field value
func (o *UserBinHistory) SetPoolAddress(v string) {
	o.PoolAddress = v
}

// GetPairName returns the PairName field value
func (o *UserBinHistory) GetPairName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PairName
}

// GetPairNameOk returns a tuple with the PairName field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetPairNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PairName, true
}

// SetPairName sets field value
func (o *UserBinHistory) SetPairName(v string) {
	o.PairName = v
}

// GetBinId returns the BinId field value
func (o *UserBinHistory) GetBinId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BinId
}

// GetBinIdOk returns a tuple with the BinId field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetBinIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BinId, true
}

// SetBinId sets field value
func (o *UserBinHistory) SetBinId(v int32) {
	o.BinId = v
}

// GetLbBinStep returns the LbBinStep field value
func (o *UserBinHistory) GetLbBinStep() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LbBinStep
}

// GetLbBinStepOk returns a tuple with the LbBinStep field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetLbBinStepOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbBinStep, true
}

// SetLbBinStep sets field value
func (o *UserBinHistory) SetLbBinStep(v float32) {
	o.LbBinStep = v
}

// GetLbBaseFeePct returns the LbBaseFeePct field value
func (o *UserBinHistory) GetLbBaseFeePct() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LbBaseFeePct
}

// GetLbBaseFeePctOk returns a tuple with the LbBaseFeePct field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetLbBaseFeePctOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbBaseFeePct, true
}

// SetLbBaseFeePct sets field value
func (o *UserBinHistory) SetLbBaseFeePct(v float32) {
	o.LbBaseFeePct = v
}

// GetLbMaxFeePct returns the LbMaxFeePct field value
func (o *UserBinHistory) GetLbMaxFeePct() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LbMaxFeePct
}

// GetLbMaxFeePctOk returns a tuple with the LbMaxFeePct field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetLbMaxFeePctOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LbMaxFeePct, true
}

// SetLbMaxFeePct sets field value
func (o *UserBinHistory) SetLbMaxFeePct(v float32) {
	o.LbMaxFeePct = v
}

// GetTokenX returns the TokenX field value
func (o *UserBinHistory) GetTokenX() UserBinPositionTokenWrapper {
	if o == nil {
		var ret UserBinPositionTokenWrapper
		return ret
	}

	return o.TokenX
}

// GetTokenXOk returns a tuple with the TokenX field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetTokenXOk() (*UserBinPositionTokenWrapper, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenX, true
}

// SetTokenX sets field value
func (o *UserBinHistory) SetTokenX(v UserBinPositionTokenWrapper) {
	o.TokenX = v
}

// GetTokenY returns the TokenY field value
func (o *UserBinHistory) GetTokenY() UserBinPositionTokenWrapper {
	if o == nil {
		var ret UserBinPositionTokenWrapper
		return ret
	}

	return o.TokenY
}

// GetTokenYOk returns a tuple with the TokenY field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetTokenYOk() (*UserBinPositionTokenWrapper, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenY, true
}

// SetTokenY sets field value
func (o *UserBinHistory) SetTokenY(v UserBinPositionTokenWrapper) {
	o.TokenY = v
}

// GetIsDeposit returns the IsDeposit field value
func (o *UserBinHistory) GetIsDeposit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeposit
}

// GetIsDepositOk returns a tuple with the IsDeposit field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetIsDepositOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeposit, true
}

// SetIsDeposit sets field value
func (o *UserBinHistory) SetIsDeposit(v bool) {
	o.IsDeposit = v
}

// GetTimestamp returns the Timestamp field value
func (o *UserBinHistory) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *UserBinHistory) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetBlockNumber returns the BlockNumber field value
func (o *UserBinHistory) GetBlockNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value
// and a boolean to check if the value has been set.
func (o *UserBinHistory) GetBlockNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNumber, true
}

// SetBlockNumber sets field value
func (o *UserBinHistory) SetBlockNumber(v int32) {
	o.BlockNumber = v
}

func (o UserBinHistory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBinHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["poolAddress"] = o.PoolAddress
	toSerialize["pairName"] = o.PairName
	toSerialize["binId"] = o.BinId
	toSerialize["lbBinStep"] = o.LbBinStep
	toSerialize["lbBaseFeePct"] = o.LbBaseFeePct
	toSerialize["lbMaxFeePct"] = o.LbMaxFeePct
	toSerialize["tokenX"] = o.TokenX
	toSerialize["tokenY"] = o.TokenY
	toSerialize["isDeposit"] = o.IsDeposit
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["blockNumber"] = o.BlockNumber

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserBinHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"poolAddress",
		"pairName",
		"binId",
		"lbBinStep",
		"lbBaseFeePct",
		"lbMaxFeePct",
		"tokenX",
		"tokenY",
		"isDeposit",
		"timestamp",
		"blockNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserBinHistory := _UserBinHistory{}

	err = json.Unmarshal(data, &varUserBinHistory)

	if err != nil {
		return err
	}

	*o = UserBinHistory(varUserBinHistory)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "poolAddress")
		delete(additionalProperties, "pairName")
		delete(additionalProperties, "binId")
		delete(additionalProperties, "lbBinStep")
		delete(additionalProperties, "lbBaseFeePct")
		delete(additionalProperties, "lbMaxFeePct")
		delete(additionalProperties, "tokenX")
		delete(additionalProperties, "tokenY")
		delete(additionalProperties, "isDeposit")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "blockNumber")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserBinHistory struct {
	value *UserBinHistory
	isSet bool
}

func (v NullableUserBinHistory) Get() *UserBinHistory {
	return v.value
}

func (v *NullableUserBinHistory) Set(val *UserBinHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBinHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBinHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBinHistory(val *UserBinHistory) *NullableUserBinHistory {
	return &NullableUserBinHistory{value: val, isSet: true}
}

func (v NullableUserBinHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBinHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
