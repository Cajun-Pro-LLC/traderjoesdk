/*
Trader Joe Dex API

<p>Discover DeFi with Trader Joe, a leading decentralized exchange. Trade a wide variety of tokens, earn rewards, and engage in secure, peer-to-peer transactions. Trader Joe makes DeFi easy and accessible.

API version: 1.0.0
Contact: public-api@traderjoexyz.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package traderjoesdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type RewardsAPI interface {

	/*
		GetProof Get Proof

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@return ApiGetProofRequest
	*/
	GetProof(ctx context.Context, chain Chain, userAddress string) ApiGetProofRequest

	// GetProofExecute executes the request
	//  @return []string
	GetProofExecute(r ApiGetProofRequest) ([]string, *http.Response, error)

	/*
		GetUserClaimableRewards Get User Claimable Rewards

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@return ApiGetUserClaimableRewardsRequest
	*/
	GetUserClaimableRewards(ctx context.Context, chain Chain, userAddress string) ApiGetUserClaimableRewardsRequest

	// GetUserClaimableRewardsExecute executes the request
	//  @return []ClaimableReward
	GetUserClaimableRewardsExecute(r ApiGetUserClaimableRewardsRequest) ([]ClaimableReward, *http.Response, error)

	/*
		GetUserProofs Get User Proofs

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@return ApiGetUserProofsRequest
	*/
	GetUserProofs(ctx context.Context, chain Chain, userAddress string) ApiGetUserProofsRequest

	// GetUserProofsExecute executes the request
	//  @return [][]string
	GetUserProofsExecute(r ApiGetUserProofsRequest) ([][]string, *http.Response, error)

	/*
		GetUserRewardHistory Get User Reward History

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param chain
		@param userAddress
		@return ApiGetUserRewardHistoryRequest
	*/
	GetUserRewardHistory(ctx context.Context, chain Chain, userAddress string) ApiGetUserRewardHistoryRequest

	// GetUserRewardHistoryExecute executes the request
	//  @return []GetUserRewardHistoryResponse
	GetUserRewardHistoryExecute(r ApiGetUserRewardHistoryRequest) ([]GetUserRewardHistoryResponse, *http.Response, error)
}

// RewardsAPIService RewardsAPI service
type RewardsAPIService service

type ApiGetProofRequest struct {
	ctx         context.Context
	ApiService  RewardsAPI
	chain       Chain
	userAddress string
	market      *string
	epoch       *int32
	token       *string
}

func (r ApiGetProofRequest) Market(market string) ApiGetProofRequest {
	r.market = &market
	return r
}

func (r ApiGetProofRequest) Epoch(epoch int32) ApiGetProofRequest {
	r.epoch = &epoch
	return r
}

func (r ApiGetProofRequest) Token(token string) ApiGetProofRequest {
	r.token = &token
	return r
}

func (r ApiGetProofRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.GetProofExecute(r)
}

/*
GetProof Get Proof

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@return ApiGetProofRequest
*/
func (a *RewardsAPIService) GetProof(ctx context.Context, chain Chain, userAddress string) ApiGetProofRequest {
	return ApiGetProofRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
	}
}

// Execute executes the request
//
//	@return []string
func (a *RewardsAPIService) GetProofExecute(r ApiGetProofRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardsAPIService.GetProof")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/rewards/{chain}/{user_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}
	if r.epoch == nil {
		return localVarReturnValue, nil, reportError("epoch is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "market", r.market, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "epoch", r.epoch, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserClaimableRewardsRequest struct {
	ctx         context.Context
	ApiService  RewardsAPI
	chain       Chain
	userAddress string
	market      *string
}

func (r ApiGetUserClaimableRewardsRequest) Market(market string) ApiGetUserClaimableRewardsRequest {
	r.market = &market
	return r
}

func (r ApiGetUserClaimableRewardsRequest) Execute() ([]ClaimableReward, *http.Response, error) {
	return r.ApiService.GetUserClaimableRewardsExecute(r)
}

/*
GetUserClaimableRewards Get User Claimable Rewards

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@return ApiGetUserClaimableRewardsRequest
*/
func (a *RewardsAPIService) GetUserClaimableRewards(ctx context.Context, chain Chain, userAddress string) ApiGetUserClaimableRewardsRequest {
	return ApiGetUserClaimableRewardsRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
	}
}

// Execute executes the request
//
//	@return []ClaimableReward
func (a *RewardsAPIService) GetUserClaimableRewardsExecute(r ApiGetUserClaimableRewardsRequest) ([]ClaimableReward, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ClaimableReward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardsAPIService.GetUserClaimableRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/rewards/claimable/{chain}/{user_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "market", r.market, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserProofsRequest struct {
	ctx           context.Context
	ApiService    RewardsAPI
	chain         Chain
	userAddress   string
	getProofBatch *GetProofBatch
}

func (r ApiGetUserProofsRequest) GetProofBatch(getProofBatch GetProofBatch) ApiGetUserProofsRequest {
	r.getProofBatch = &getProofBatch
	return r
}

func (r ApiGetUserProofsRequest) Execute() ([][]string, *http.Response, error) {
	return r.ApiService.GetUserProofsExecute(r)
}

/*
GetUserProofs Get User Proofs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@return ApiGetUserProofsRequest
*/
func (a *RewardsAPIService) GetUserProofs(ctx context.Context, chain Chain, userAddress string) ApiGetUserProofsRequest {
	return ApiGetUserProofsRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
	}
}

// Execute executes the request
//
//	@return [][]string
func (a *RewardsAPIService) GetUserProofsExecute(r ApiGetUserProofsRequest) ([][]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue [][]string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardsAPIService.GetUserProofs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/rewards/batch-proof/{chain}/{user_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getProofBatch == nil {
		return localVarReturnValue, nil, reportError("getProofBatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getProofBatch
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserRewardHistoryRequest struct {
	ctx         context.Context
	ApiService  RewardsAPI
	chain       Chain
	userAddress string
	market      *string
}

func (r ApiGetUserRewardHistoryRequest) Market(market string) ApiGetUserRewardHistoryRequest {
	r.market = &market
	return r
}

func (r ApiGetUserRewardHistoryRequest) Execute() ([]GetUserRewardHistoryResponse, *http.Response, error) {
	return r.ApiService.GetUserRewardHistoryExecute(r)
}

/*
GetUserRewardHistory Get User Reward History

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chain
	@param userAddress
	@return ApiGetUserRewardHistoryRequest
*/
func (a *RewardsAPIService) GetUserRewardHistory(ctx context.Context, chain Chain, userAddress string) ApiGetUserRewardHistoryRequest {
	return ApiGetUserRewardHistoryRequest{
		ApiService:  a,
		ctx:         ctx,
		chain:       chain,
		userAddress: userAddress,
	}
}

// Execute executes the request
//
//	@return []GetUserRewardHistoryResponse
func (a *RewardsAPIService) GetUserRewardHistoryExecute(r ApiGetUserRewardHistoryRequest) ([]GetUserRewardHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []GetUserRewardHistoryResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardsAPIService.GetUserRewardHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/rewards/history/{chain}/{user_address}"
	localVarPath = strings.Replace(localVarPath, "{"+"chain"+"}", url.PathEscape(parameterValueToString(r.chain, "chain")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_address"+"}", url.PathEscape(parameterValueToString(r.userAddress, "userAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.market == nil {
		return localVarReturnValue, nil, reportError("market is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "market", r.market, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-traderjoe-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
